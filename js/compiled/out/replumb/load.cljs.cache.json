["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$replumb.load","~:imports",null,"~:requires",["^ ","~$cljs","~$cljs.js","^<","^<","~$replumb.cache","^=","~$goog.Promise","^>","~$string","~$clojure.string","~$common","~$replumb.common","~$cache","^=","^@","^@","~$cljs.reader","^D","~$edn","^D","^B","^B"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$skip-load?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","~:line",238,"~:column",7,"~:end-line",238,"~:end-column",17,"~:arglists",["~#list",["~$quote",["^R",[[["^ ","~:keys",["~$name","~$macros"]]]]]]]],"^7","~$replumb.load/skip-load?","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",17,"~:method-params",["^R",[["~$p__29727"]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^N",1,"~:variadic?",false,"^M",238,"~:ret-tag",["^6",["~$boolean","~$any"]],"^O",238,"~:max-fixed-arity",1,"~:fn-var",true,"^Q",["^R",["^S",["^R",[[["^ ","^T",["^U","^V"]]]]]]]],"~$fake-load-fn!",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",26,"^N",7,"^O",26,"^P",20,"^Q",["^R",["^S",["^R",[["~$_","~$cb"]]]]],"~:doc","This load function just calls:\n  (cb {:lang   :js\n       :source \"\"})"],"^7","~$replumb.load/fake-load-fn!","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",20,"^X",["^R",[["~$_","^17"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",26,"^11","^13","^O",26,"^14",2,"^15",true,"^Q",["^R",["^S",["^R",[["~$_","^17"]]]]],"^18","This load function just calls:\n  (cb {:lang   :js\n       :source \"\"})"],"~$filename->lang",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",39,"^N",7,"^O",39,"^P",21,"^Q",["^R",["^S",["^R",[["~$file-name"]]]]],"^18","Converts a filename to a lang keyword by inspecting the file\n  extension."],"^7","~$replumb.load/filename->lang","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",21,"^X",["^R",[["^1;"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",39,"^11","~$cljs.core/Keyword","^O",39,"^14",1,"^15",true,"^Q",["^R",["^S",["^R",[["^1;"]]]]],"^18","Converts a filename to a lang keyword by inspecting the file\n  extension."],"~$file-paths-for-closure",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",175,"^N",7,"^O",175,"^P",29,"^Q",["^R",["^S",["^R",[["~$src-paths","~$goog-path"]]]]],"^18","Produces a sequence of file paths to try reading crafted for goog\n  libraries, in the order they should be tried."],"^7","~$replumb.load/file-paths-for-closure","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",29,"^X",["^R",[["^1?","^1@"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",175,"^11","^13","^O",175,"^14",2,"^15",true,"^Q",["^R",["^S",["^R",[["^1?","^1@"]]]]],"^18","Produces a sequence of file paths to try reading crafted for goog\n  libraries, in the order they should be tried."],"~$read-files-from-cache-and-callback!",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",108,"^N",7,"^O",108,"^P",42,"^Q",["^R",["^S",["^R",[["~$verbose?","~$file-names","~$read-file-fn!","~$load-fn-cb","~$cached-file-names","^U"]]]]],"^18","Loops over cached-file-names in order to retrieve them. It needs to find\n  both the related .js file and .cache.json file, otherwise keeps looping.\n  If it does not find the cached files calls read-files-and-callback! and\n  tries to load the unevaluated ones.\n  This function does not check whether parameters are nil, please do it in\n  the caller."],"^7","~$replumb.load/read-files-from-cache-and-callback!","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",42,"^X",["^R",[["^1C","^1D","^1E","^1F","^1G","^U"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",108,"^11","^13","^O",108,"^14",6,"^15",true,"^Q",["^R",["^S",["^R",[["^1C","^1D","^1E","^1F","^1G","^U"]]]]],"^18","Loops over cached-file-names in order to retrieve them. It needs to find\n  both the related .js file and .cache.json file, otherwise keeps looping.\n  If it does not find the cached files calls read-files-and-callback! and\n  tries to load the unevaluated ones.\n  This function does not check whether parameters are nil, please do it in\n  the caller."],"~$read-cache-file",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",82,"^N",7,"^O",82,"^P",22,"^Q",["^R",["^S",["^R",[[["^ ","^T",["^1C","^1E","~$js-path","~$cache-path","~$try-next-files-pair-fn","^1F"]],"~$js-source"]]]]]],"^7","~$replumb.load/read-cache-file","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",22,"^X",["^R",[["~$p__29672","^1M"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",82,"^11","^13","^O",82,"^14",2,"^15",true,"^Q",["^R",["^S",["^R",[[["^ ","^T",["^1C","^1E","^1J","^1K","^1L","^1F"]],"^1M"]]]]]],"~$file-paths-for-load-fn",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",150,"^N",7,"^O",150,"^P",29,"^Q",["^R",["^S",["^R",[["^1?","^V","~$file-path-without-ext"]]]]],"^18","Produces a sequence of file names to try reading from src-paths and\n  file-path-without-ext (it should already include one or more\n  \"/\"). The right order and extension is taken from cljs.js/*load-fn*\n  docstring and takes into consideration the macros parameter."],"^7","~$replumb.load/file-paths-for-load-fn","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",29,"^X",["^R",[["^1?","^V","^1Q"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",150,"^11","^13","^O",150,"^14",3,"^15",true,"^Q",["^R",["^S",["^R",[["^1?","^V","^1Q"]]]]],"^18","Produces a sequence of file names to try reading from src-paths and\n  file-path-without-ext (it should already include one or more\n  \"/\"). The right order and extension is taken from cljs.js/*load-fn*\n  docstring and takes into consideration the macros parameter."],"~$read-js-file",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",97,"^N",7,"^O",97,"^P",19,"^Q",["^R",["^S",["^R",[[["^ ","^T",["^1C","^1E","^1J","^1K","^1L"],"~:as","~$opts"],"~$read-cache-file-fn"]]]]]],"^7","~$replumb.load/read-js-file","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",19,"^X",["^R",[["~$p__29675","^1V"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",97,"^11","^13","^O",97,"^14",2,"^15",true,"^Q",["^R",["^S",["^R",[[["^ ","^T",["^1C","^1E","^1J","^1K","^1L"],"^1T","^1U"],"^1V"]]]]]],"~$read-goog-file-promise",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",197,"^N",7,"^O",197,"^P",29,"^Q",["^R",["^S",["^R",[["^1C","^1E","~$path","~$results"]]]]],"^18","Return a promise that resolves with the result of accumulating the\n  actual call to replumb.repl/read-eval-call on the source with results."],"^7","~$replumb.load/read-goog-file-promise","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",29,"^X",["^R",[["^1C","^1E","^1Z","^1["]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",197,"^11","~$goog/Promise","^O",197,"^14",4,"^15",true,"^Q",["^R",["^S",["^R",[["^1C","^1E","^1Z","^1["]]]]],"^18","Return a promise that resolves with the result of accumulating the\n  actual call to replumb.repl/read-eval-call on the source with results."],"~$cache-file-paths-for-load-fn",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",160,"^N",7,"^O",160,"^P",35,"^Q",["^R",["^S",["^R",[["~$cache-paths","^V","^1Q"]]]]],"^18","Produces a sequence of pairs containing the file paths to try reading for\n  evaluation caching.\n  The first file is always a \".js\" file while the second is the cache file\n  and can be a \".json\" or \".edn\" file."],"^7","~$replumb.load/cache-file-paths-for-load-fn","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",35,"^X",["^R",[["^23","^V","^1Q"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",160,"^11","^13","^O",160,"^14",3,"^15",true,"^Q",["^R",["^S",["^R",[["^23","^V","^1Q"]]]]],"^18","Produces a sequence of pairs containing the file paths to try reading for\n  evaluation caching.\n  The first file is always a \".js\" file while the second is the cache file\n  and can be a \".json\" or \".edn\" file."],"~$file-paths",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",143,"^N",7,"^O",143,"^P",17,"^Q",["^R",["^S",["^R",[["^1?","~$file-path"]]]]],"^18","Produces a sequence of file paths based on src-paths and file-path (a\n  path already including one or more \"/\" and an extension)."],"^7","~$replumb.load/file-paths","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",17,"^X",["^R",[["^1?","^26"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",143,"^11","^13","^O",143,"^14",2,"^15",true,"^Q",["^R",["^S",["^R",[["^1?","^26"]]]]],"^18","Produces a sequence of file paths based on src-paths and file-path (a\n  path already including one or more \"/\" and an extension)."],"~$loaded-js-set",["^ ","^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",9,"^N",6,"^O",9,"^P",19],"^7","~$replumb.load/loaded-js-set","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",19,"^N",1,"^M",9,"^O",9,"~:tag","~$cljs.core/ISet","^18","A set containing namespaces already loaded."],"~$goog-closure-index-promise!",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",213,"^N",7,"^O",213,"^P",34,"^Q",["^R",["^S",["^R",[["^1C","^1?","^1E"]]]]],"^18","Return a promise containing a map Google Closure symbol -> file\n  path (string without extension) as in:\n\n  {goog.a11y.aria.DropEffectValues \"goog/a11y/aria/attributes\"\n   goog.labs.i18n.ListFormatSymbols_en_BW \"goog/labs/i18n/listsymbolsext\"\n   ...}\n\n  It merges maps if many deps.js are on the source path, precedence to\n  the rightmost (as per merge)."],"^7","~$replumb.load/goog-closure-index-promise!","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",34,"^X",["^R",[["^1C","^1?","^1E"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",213,"^11","^13","^O",213,"^14",3,"^15",true,"^Q",["^R",["^S",["^R",[["^1C","^1?","^1E"]]]]],"^18","Return a promise containing a map Google Closure symbol -> file\n  path (string without extension) as in:\n\n  {goog.a11y.aria.DropEffectValues \"goog/a11y/aria/attributes\"\n   goog.labs.i18n.ListFormatSymbols_en_BW \"goog/labs/i18n/listsymbolsext\"\n   ...}\n\n  It merges maps if many deps.js are on the source path, precedence to\n  the rightmost (as per merge)."],"~$goog-deps-map",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",182,"^N",7,"^O",182,"^P",20,"^Q",["^R",["^S",["^R",[["~$deps-js-content"]]]]],"^18","Given the content of goog/deps.js file, create a map\n  provide->path (without extension) of Google dependencies.\n\n  Adapted from planck:\n  https://github.com/mfikes/planck/blob/master/planck-cljs/src/planck/repl.cljs#L438-L451"],"^7","~$replumb.load/goog-deps-map","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",20,"^X",["^R",[["^2?"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",182,"^11","^13","^O",182,"^14",1,"^15",true,"^Q",["^R",["^S",["^R",[["^2?"]]]]],"^18","Given the content of goog/deps.js file, create a map\n  provide->path (without extension) of Google dependencies.\n\n  Adapted from planck:\n  https://github.com/mfikes/planck/blob/master/planck-cljs/src/planck/repl.cljs#L438-L451"],"~$no-resource-load-fn!",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",34,"^N",7,"^O",34,"^P",27,"^Q",["^R",["^S",["^R",[["~$_","^17"]]]]],"^18","Mimics \"Resource not found\" as it just calls: (cb nil)"],"^7","~$replumb.load/no-resource-load-fn!","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",27,"^X",["^R",[["~$_","^17"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",34,"^11","^13","^O",34,"^14",2,"^15",true,"^Q",["^R",["^S",["^R",[["~$_","^17"]]]]],"^18","Mimics \"Resource not found\" as it just calls: (cb nil)"],"~$extensions",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",52,"^N",7,"^O",52,"^P",17,"^Q",["^R",["^S",["^R",[[],["^V"]]]]],"^18","Returns the correct file extensions to try (no dot prefix), following\n  the cljs.js/*load-fn* docstring.","~:top-fn",["^ ","^10",false,"^14",1,"^X",["^R",[[],["^V"]]],"^Q",["^R",[[],["^V"]]],"^[",["^R",[null,null]]]],"^7","~$replumb.load/extensions","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",17,"^2D",["^ ","^10",false,"^14",1,"^X",["^R",[[],["^V"]]],"^Q",["^R",[[],["^V"]]],"^[",["^R",[null,null]]],"^X",["^R",[[],["^V"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",52,"^O",52,"^14",1,"^15",true,"^Q",["^R",[[],["^V"]]],"^18","Returns the correct file extensions to try (no dot prefix), following\n  the cljs.js/*load-fn* docstring."],"~$read-cache-source",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",45,"^N",7,"^O",45,"^P",24,"^Q",["^R",["^S",["^R",[["^1K","~$cache-source"]]]]],"^18","Read the cache source depending on whether is a edn or json file"],"^7","~$replumb.load/read-cache-source","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",24,"^X",["^R",[["^1K","^2G"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",45,"^11","^13","^O",45,"^14",2,"^15",true,"^Q",["^R",["^S",["^R",[["^1K","^2G"]]]]],"^18","Read the cache source depending on whether is a edn or json file"],"~$read-files-and-callback!",["^ ","^J",null,"^K",["^ ","^L","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/load.cljs","^M",60,"^N",7,"^O",60,"^P",31,"^Q",["^R",["^S",["^R",[["^1C","^1D","^1E","^1F"]]]]],"^18","Loop on the file-names using a supplied read-file-fn (fn [file-name\n  src-cb] ...), calling back cb upon first successful read, otherwise\n  calling back with nil.\n  This function does not check whether parameters are nil, please do it\n  in the caller."],"^7","~$replumb.load/read-files-and-callback!","^L","resources/public/js/compiled/out/replumb/load.cljs","^P",31,"^X",["^R",[["^1C","^1D","^1E","^1F"]]],"^Z",null,"^[",["^R",[null,null]],"^N",1,"^10",false,"^M",60,"^11","^13","^O",60,"^14",4,"^15",true,"^Q",["^R",["^S",["^R",[["^1C","^1D","^1E","^1F"]]]]],"^18","Loop on the file-names using a supplied read-file-fn (fn [file-name\n  src-cb] ...), calling back cb upon first successful read, otherwise\n  calling back with nil.\n  This function does not check whether parameters are nil, please do it\n  in the caller."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^;","^<","^<","^<","^E","^D","^D","^D"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~$cljs.compiler","~:verbose?","~$cljs.source-map.base64","~:read-file-fn!","~:load-fn-cb","~:js","~$cljs.source-map.base64-vlq","~:macros","^7","~$cljs.stacktrace","~$cljs.core","^L","~$cljs.test","~$cljs.tools.reader.reader-types","~$cljs.env","~:source","~$cognitect.transit","~:try-next-files-pair-fn","~$clojure.set","~:lang","~$cljs.pprint","~:cache","~$cljs.tools.reader.impl.utils","~$cljs.tagged-literals","~:js-path","~$cljs.analyzer","~$cljs.source-map","^@","^D","~:clj","~:cache-path","~$clojure.template"]],"~:order",["^2O","^2Q","^2U","^2W","^2Z","^2[","^31","^33","^37","^38","^3:","^3;","^@","^D","^34","^30","^2T","^3<","^L","^2P","^2R","^39","^3=","^32","^2S","^36","^7","^2V","^2X","^35","^2Y","^3>"]],"^18",null]