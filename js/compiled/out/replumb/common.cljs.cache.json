["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$cljs",["^ ","~$user",["^ "]]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$replumb.common","~:imports",null,"~:requires",["^ ","~$string","~$clojure.string","^>","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$error-branch?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","~:line",5,"~:column",7,"~:end-line",5,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^K",[["~$error"]]]]]],"^9","~$replumb.common/error-branch?","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",20,"~:method-params",["^K",[["^M"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^G",1,"~:variadic?",false,"^F",5,"~:ret-tag","~$boolean","^H",5,"~:max-fixed-arity",1,"~:fn-var",true,"^J",["^K",["^L",["^K",[["^M"]]]]]],"~$error-seq",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",13,"^G",7,"^H",13,"^I",16,"^J",["^K",["^L",["^K",[["^M"]]]]]],"^9","~$replumb.common/error-seq","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",16,"^O",["^K",[["^M"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",13,"^S","~$any","^H",13,"^U",1,"^V",true,"^J",["^K",["^L",["^K",[["^M"]]]]]],"~$echo-callback",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",43,"^G",7,"^H",43,"^I",20,"^J",["^K",["^L",["^K",[["~$result-map"]]]]],"~:doc","Callback that just echoes the result map. It also asserts the correct\n  result format in its post condition. Useful for debugging and\n  testing.","~:post",[["^K",["~$map?","~$%"]],["^K",["~$find","~$%","~:success?"]],["^K",["~$or",["^K",["^13","~$%","~:error"]],["^K",["^13","~$%","~:value"]]]]]],"^9","~$replumb.common/echo-callback","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",20,"^O",["^K",[["^["]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",43,"^H",43,"^11",[["^K",["^12","~$%"]],["^K",["^13","~$%","^14"]],["^K",["^15",["^K",["^13","~$%","^16"]],["^K",["^13","~$%","^17"]]]]],"^U",1,"^V",true,"^J",["^K",["^L",["^K",[["^["]]]]],"^10","Callback that just echoes the result map. It also asserts the correct\n  result format in its post condition. Useful for debugging and\n  testing."],"~$filter-fn-keys",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",102,"^G",7,"^H",102,"^I",21,"^J",["^K",["^L",["^K",[["~$opts"]]]]],"^10","Filter out the option map keys that have -fn in it."],"^9","~$replumb.common/filter-fn-keys","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",21,"^O",["^K",[["^1:"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",102,"^S","^Y","^H",102,"^U",1,"^V",true,"^J",["^K",["^L",["^K",[["^1:"]]]]],"^10","Filter out the option map keys that have -fn in it."],"~$has-valid-warning?",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",85,"^G",7,"^H",85,"^I",25,"^J",["^K",["^L",["^K",[["~$result"]]]]]],"^9","~$replumb.common/has-valid-warning?","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",25,"^O",["^K",[["^1="]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",85,"^S",["^8",["^T","~$clj-nil"]],"^H",85,"^U",1,"^V",true,"^J",["^K",["^L",["^K",[["^1="]]]]]],"~$normalize-path",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",120,"^G",7,"^H",120,"^I",21,"^J",["^K",["^L",["^K",[["~$path"]]]]],"^10","Adds a / if missing at the end of the path."],"^9","~$replumb.common/normalize-path","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",21,"^O",["^K",[["^1A"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",120,"^S","^Y","^H",120,"^U",1,"^V",true,"^J",["^K",["^L",["^K",[["^1A"]]]]],"^10","Adds a / if missing at the end of the path."],"~$error-keyword-not-supported",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",89,"^G",7,"^H",89,"^I",34,"^J",["^K",["^L",["^K",[["~$keyword","~$ex-info-data"]]]]],"^10","Yields a \"keyword not supported\" error map. Receives the\n  symbol/keyword printed in the message and ex-info data."],"^9","~$replumb.common/error-keyword-not-supported","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",34,"^O",["^K",[["^1D","^1E"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",89,"^S","~$cljs.core/IMap","^H",89,"^U",2,"^V",true,"^J",["^K",["^L",["^K",[["^1D","^1E"]]]]],"^10","Yields a \"keyword not supported\" error map. Receives the\n  symbol/keyword printed in the message and ex-info data."],"~$wrap-error",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",56,"^G",7,"^H",56,"^I",17,"^J",["^K",["^L",["^K",[["~$message"]]]]],"^10","Wraps the message in a error map."],"^9","~$replumb.common/wrap-error","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",17,"^O",["^K",[["^1I"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",56,"^S","^1G","^H",56,"^U",1,"^V",true,"^J",["^K",["^L",["^K",[["^1I"]]]]],"^10","Wraps the message in a error map."],"~$extract-message",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",17,"^G",7,"^H",17,"^I",22,"^J",["^K",["^L",["^K",[["~$err"],["~$print-stack?","^1L"],["^1M","~$exclude-error-msg?","^1L"]]]]],"^10","Iteratively extracts messages inside nested #error objects, returns a\n  string.\n\n  If the boolean `exclude-error-msg?` is true, only the messages not\n  marked as \"ERROR\" will be included in the final string.\n\n  If the boolean `print-stack?` is true, the stack will be added\n  to the final string. They both default to false.\n\n  ** Be sure to pass a js/Error object here **","~:top-fn",["^ ","^R",false,"^U",3,"^O",["^K",[["^1L"],["^1M","^1L"],["^1M","^1N","^1L"]]],"^J",["^K",[["^1L"],["^1M","^1L"],["^1M","^1N","^1L"]]],"^Q",["^K",[null,null,null]]]],"^9","~$replumb.common/extract-message","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",22,"^1O",["^ ","^R",false,"^U",3,"^O",["^K",[["^1L"],["^1M","^1L"],["^1M","^1N","^1L"]]],"^J",["^K",[["^1L"],["^1M","^1L"],["^1M","^1N","^1L"]]],"^Q",["^K",[null,null,null]]],"^O",["^K",[["^1L"],["^1M","^1L"],["^1M","^1N","^1L"]]],"^P",null,"^Q",["^K",[null,null,null]],"^G",1,"^R",false,"^F",17,"^H",17,"^U",3,"^V",true,"^J",["^K",[["^1L"],["^1M","^1L"],["^1M","^1N","^1L"]]],"^10","Iteratively extracts messages inside nested #error objects, returns a\n  string.\n\n  If the boolean `exclude-error-msg?` is true, only the messages not\n  marked as \"ERROR\" will be included in the final string.\n\n  If the boolean `print-stack?` is true, the stack will be added\n  to the final string. They both default to false.\n\n  ** Be sure to pass a js/Error object here **"],"~$wrap-success",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",51,"^G",7,"^H",51,"^I",19,"^J",["^K",["^L",["^K",[["^1I"]]]]],"^10","Wraps the message in a success map."],"^9","~$replumb.common/wrap-success","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",19,"^O",["^K",[["^1I"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",51,"^S","^1G","^H",51,"^U",1,"^V",true,"^J",["^K",["^L",["^K",[["^1I"]]]]],"^10","Wraps the message in a success map."],"~$valid-eval-warning?",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",80,"^G",7,"^H",80,"^I",26,"^J",["^K",["^L",["^K",[["~$warning"]]]]],"^10","Is the string returned from an evaluation valid?"],"^9","~$replumb.common/valid-eval-warning?","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",26,"^O",["^K",[["^1T"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",80,"^S","^T","^H",80,"^U",1,"^V",true,"^J",["^K",["^L",["^K",[["^1T"]]]]],"^10","Is the string returned from an evaluation valid?"],"~$error-children",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",9,"^G",7,"^H",9,"^I",21,"^J",["^K",["^L",["^K",[["^M"]]]]]],"^9","~$replumb.common/error-children","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",21,"^O",["^K",[["^M"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",9,"^S","~$cljs.core/IVector","^H",9,"^U",1,"^V",true,"^J",["^K",["^L",["^K",[["^M"]]]]]],"~$valid-eval-result?",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",67,"^G",7,"^H",67,"^I",25,"^J",["^K",["^L",["^K",[["^1="],["^1:","^1="]]]]],"^10","Is the string returned from an evaluation valid?","^1O",["^ ","^R",false,"^U",2,"^O",["^K",[["^1="],["^1:","^1="]]],"^J",["^K",[["^1="],["^1:","^1="]]],"^Q",["^K",[null,null]]]],"^9","~$replumb.common/valid-eval-result?","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",25,"^1O",["^ ","^R",false,"^U",2,"^O",["^K",[["^1="],["^1:","^1="]]],"^J",["^K",[["^1="],["^1:","^1="]]],"^Q",["^K",[null,null]]],"^O",["^K",[["^1="],["^1:","^1="]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",67,"^H",67,"^U",2,"^V",true,"^J",["^K",[["^1="],["^1:","^1="]]],"^10","Is the string returned from an evaluation valid?"],"~$set-cljs-user!",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",125,"^G",7,"^H",125,"^I",21,"^J",["^K",["^L",["^K",[[]]]]],"^10","Set up the cljs.user namespace"],"^9","~$replumb.common/set-cljs-user!","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",21,"^O",["^K",[[]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",125,"^H",125,"^U",0,"^V",true,"^J",["^K",["^L",["^K",[[]]]]],"^10","Set up the cljs.user namespace"],"~$inline-newline?",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",61,"^G",7,"^H",61,"^I",22,"^J",["^K",["^L",["^K",[["~$s"]]]]],"^10","Returns true if the string contains the newline \\\\n or \\\\r as\n  characters."],"^9","~$replumb.common/inline-newline?","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",22,"^O",["^K",[["~$s"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",61,"^S",["^8",["~$clj","^1X","^Y","~$cljs.core/MetaFn","^1?"]],"^H",61,"^U",1,"^V",true,"^J",["^K",["^L",["^K",[["~$s"]]]]],"^10","Returns true if the string contains the newline \\\\n or \\\\r as\n  characters."],"~$debug-prn",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",109,"^G",7,"^H",109,"^I",16,"^J",["^K",["^L",["^K",[["~$&","~$args"]]]]],"^10","The function used by replumb for logging. It simply calls println for\n  now so you that client code can set *print-fn* to customize the\n  behavior, for example the following marks traces as DEBUG:\n\n  (set! *print-fn*\n    (fn [& args]\n      (.apply (.-debug js/console) js/console (into-array args))))","^1O",["^ ","^R",true,"^U",0,"^O",[["^K",["^26"]]],"^J",["^K",[["~$&","^26"]]],"^Q",["^K",[null]]]],"^9","~$replumb.common/debug-prn","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",16,"^1O",["^ ","^R",true,"^U",0,"^O",[["^K",["^26"]]],"^J",["^K",[["~$&","^26"]]],"^Q",["^K",[null]]],"^O",[["^K",["^26"]]],"^P",null,"^Q",["^K",[null]],"^G",1,"^R",true,"^F",109,"^S","^Y","^H",109,"^U",0,"^V",true,"^J",["^K",[["~$&","^26"]]],"^10","The function used by replumb for logging. It simply calls println for\n  now so you that client code can set *print-fn* to customize the\n  behavior, for example the following marks traces as DEBUG:\n\n  (set! *print-fn*\n    (fn [& args]\n      (.apply (.-debug js/console) js/console (into-array args))))"],"~$valid-eval-error?",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",75,"^G",7,"^H",75,"^I",24,"^J",["^K",["^L",["^K",[["^M"]]]]],"^10","Is the string returned from an evaluation valid?"],"^9","~$replumb.common/valid-eval-error?","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",24,"^O",["^K",[["^M"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",75,"^S","^T","^H",75,"^U",1,"^V",true,"^J",["^K",["^L",["^K",[["^M"]]]]],"^10","Is the string returned from an evaluation valid?"],"~$error-argument-must-be-symbol",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/common.cljs","^F",96,"^G",7,"^H",96,"^I",36,"^J",["^K",["^L",["^K",[["~$symbol","^1E"]]]]],"^10","Yields a \"Argument must a be a symbol\" error map. Receives the\n  symbol/fn name printed in the message and ex-info data."],"^9","~$replumb.common/error-argument-must-be-symbol","^E","resources/public/js/compiled/out/replumb/common.cljs","^I",36,"^O",["^K",[["^2;","^1E"]]],"^P",null,"^Q",["^K",[null,null]],"^G",1,"^R",false,"^F",96,"^S","^1G","^H",96,"^U",2,"^V",true,"^J",["^K",["^L",["^K",[["^2;","^1E"]]]]],"^10","Yields a \"Argument must a be a symbol\" error map. Receives the\n  symbol/fn name printed in the message and ex-info data."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["^17","~:warning","~:no-pr-str-on-value","^16"]],"~:order",["^17","^16","^2B","^2A"]],"^10",null]