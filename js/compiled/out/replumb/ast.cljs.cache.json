["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$namespace","~$ns-publics","~$ns-interns"]],"~:name","~$replumb.ast","~:imports",null,"~:requires",["^ ","~$goog.string","^>"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$dissoc-symbol",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","~:line",161,"~:column",7,"~:end-line",161,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^K",[["~$state","~$requirer-ns","~$sym"]]]]],"~:doc","Dissoc symbol from the compiler state given the symbol of the\n  namespace where `require` (or `use`) was called from."],"^:","~$replumb.ast/dissoc-symbol","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",20,"~:method-params",["^K",[["^M","^N","^O"]]],"~:protocol-impl",null,"~:arglists-meta",["^K",[null,null]],"^G",1,"~:variadic?",false,"^F",161,"~:ret-tag","~$any","^H",161,"~:max-fixed-arity",3,"~:fn-var",true,"^J",["^K",["^L",["^K",[["^M","^N","^O"]]]]],"^P","Dissoc symbol from the compiler state given the symbol of the\n  namespace where `require` (or `use`) was called from."],"~$symbol-of-ns?",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",133,"^G",7,"^H",133,"^I",20,"^J",["^K",["^L",["^K",[["~$ns","^O"]]]]],"^P","Yields true when the symbol belongs to ns.\n\n  This typically works on the output of `replumb.ast/symbols`."],"^:","~$replumb.ast/symbol-of-ns?","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",20,"^R",["^K",[["^[","^O"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",133,"^V","~$boolean","^H",133,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^[","^O"]]]]],"^P","Yields true when the symbol belongs to ns.\n\n  This typically works on the output of `replumb.ast/symbols`."],"~$macro-of-ns?",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",147,"^G",7,"^H",147,"^I",19,"^J",["^K",["^L",["^K",[["^[","^O"]]]]],"^P","Yields true when the sym belongs to ns.\n\n  This typically works on the output of `replumb.ast/macros`."],"^:","~$replumb.ast/macro-of-ns?","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",19,"^R",["^K",[["^[","^O"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",147,"^V","^11","^H",147,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^[","^O"]]]]],"^P","Yields true when the sym belongs to ns.\n\n  This typically works on the output of `replumb.ast/macros`."],"~$require-of-ns?",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",125,"^G",7,"^H",125,"^I",21,"^J",["^K",["^L",["^K",[["^[","^O"]]]]],"^P","Yields true when the symbol belongs to ns.\n\n  This typically works on the output of either `replumb.ast/requires` or\n  `replumb.ast/macro-requires`."],"^:","~$replumb.ast/require-of-ns?","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",21,"^R",["^K",[["^[","^O"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",125,"^V","^11","^H",125,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^[","^O"]]]]],"^P","Yields true when the symbol belongs to ns.\n\n  This typically works on the output of either `replumb.ast/requires` or\n  `replumb.ast/macro-requires`."],"^7",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",60,"^G",7,"^H",60,"^I",16,"^J",["^K",["^L",["^K",[["^M","^["]]]]],"^P","Given compiler state and namespace symbol, returns its whole AST\n  content.\n\n  Beware, there can be a lot of data."],"^:","~$replumb.ast/namespace","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",16,"^R",["^K",[["^M","^["]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",60,"^V","^W","^H",60,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^["]]]]],"^P","Given compiler state and namespace symbol, returns its whole AST\n  content.\n\n  Beware, there can be a lot of data."],"^8",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",12,"^G",7,"^H",12,"^I",17,"^J",["^K",["^L",["^K",[["^M","^["]]]]],"^P","Given compiler state and namespace symbol return all the public vars\n  in the AST.\n\n  Analogous to `cljs.analyzer/ns-publics`, but it returns analysis maps\n  not vars.\n\n  Beware, there can be a lot of data."],"^:","~$replumb.ast/ns-publics","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",17,"^R",["^K",[["^M","^["]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",12,"^V","^W","^H",12,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^["]]]]],"^P","Given compiler state and namespace symbol return all the public vars\n  in the AST.\n\n  Analogous to `cljs.analyzer/ns-publics`, but it returns analysis maps\n  not vars.\n\n  Beware, there can be a lot of data."],"~$symbols",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",95,"^G",7,"^H",95,"^I",14,"^J",["^K",["^L",["^K",[["^M","^N"]]]]],"^P","Return referred/used symbols given compiler state and a namespace: a\n  map of `{symbol1 ns, symbol2 ns, ...}`.\n\n  You need a `:refer` in the requirer-ns namespace for this to return\n  something."],"^:","~$replumb.ast/symbols","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",14,"^R",["^K",[["^M","^N"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",95,"^V","^W","^H",95,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^N"]]]]],"^P","Return referred/used symbols given compiler state and a namespace: a\n  map of `{symbol1 ns, symbol2 ns, ...}`.\n\n  You need a `:refer` in the requirer-ns namespace for this to return\n  something."],"~$macros",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",105,"^G",7,"^H",105,"^I",13,"^J",["^K",["^L",["^K",[["^M","^N"]]]]],"^P","Return all the macro symbols given compiler state and namespace: a\n  map of `{macro-symbol1 macro-ns, macro-symbol2 macro-ns}`.\n\n  You need a `:refer` in the requirer-ns namespace for this to return\n  something."],"^:","~$replumb.ast/macros","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",13,"^R",["^K",[["^M","^N"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",105,"^V","^W","^H",105,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^N"]]]]],"^P","Return all the macro symbols given compiler state and namespace: a\n  map of `{macro-symbol1 macro-ns, macro-symbol2 macro-ns}`.\n\n  You need a `:refer` in the requirer-ns namespace for this to return\n  something."],"~$dissoc-macro",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",176,"^G",7,"^H",176,"^I",19,"^J",["^K",["^L",["^K",[["^M","^N","^O"]]]]],"^P","Dissoc a macro symbol from the compiler state given the symbol of the\n  namespace where `require-macros` (or `use-macros`) was called from."],"^:","~$replumb.ast/dissoc-macro","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",19,"^R",["^K",[["^M","^N","^O"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",176,"^V","^W","^H",176,"^X",3,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^N","^O"]]]]],"^P","Dissoc a macro symbol from the compiler state given the symbol of the\n  namespace where `require-macros` (or `use-macros`) was called from."],"~$get-state",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",254,"^G",7,"^H",254,"^I",16,"^J",["^K",["^L",["^K",[["^M","^N"]]]]],"^P","Retrieves a map with the state details for the input requirer-ns.\n\n  In replumb jargon:\n\n  ```\n  (in-ns 'cljs.user)          ;; requirer-ns\n  (require-macros 'cljs.test) ;; required-ns\n  ```\n\n  And the returned map is (on the right, the compiler AST real key):\n\n  ```\n  {:requires (replumb.ast/requires ...)             ;; :requires\n   :macro-requires (replumb.ast/macro-requires ...) ;; :require-macros\n   :symbols (replumb.ast/symbols ...)               ;; :uses\n   :macros (replumb.ast/macros ...)                 ;; :use-macros\n   :imports (replumb.ast/imports ...)}              ;; :imports\n  ```"],"^:","~$replumb.ast/get-state","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",16,"^R",["^K",[["^M","^N"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",254,"^V","~$cljs.core/IMap","^H",254,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^N"]]]]],"^P","Retrieves a map with the state details for the input requirer-ns.\n\n  In replumb jargon:\n\n  ```\n  (in-ns 'cljs.user)          ;; requirer-ns\n  (require-macros 'cljs.test) ;; required-ns\n  ```\n\n  And the returned map is (on the right, the compiler AST real key):\n\n  ```\n  {:requires (replumb.ast/requires ...)             ;; :requires\n   :macro-requires (replumb.ast/macro-requires ...) ;; :require-macros\n   :symbols (replumb.ast/symbols ...)               ;; :uses\n   :macros (replumb.ast/macros ...)                 ;; :use-macros\n   :imports (replumb.ast/imports ...)}              ;; :imports\n  ```"],"~$dissoc-all",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",227,"^G",7,"^H",227,"^I",17,"^J",["^K",["^L",["^K",[["^M","^N","~$required-ns"],["^M","^N","^1B","~$type"]]]]],"^P","Dissoc all the required-ns symbols from requirer-ns.\n\n  There are five types of symbol in replumb jargon, which loosely map to\n  `cljs.js` ones. These optionally go in the type parameter as keyword:\n\n  - `:symbol`, the default, for instance my-sym in `(def my-sym 3)`\n  - `:macro`, which comes from a `(defmacro ...)`\n  - `:import`, for instance User in `(import 'foo.bar.User)`\n  - `:require`, which is the namespace symbol in a `(require ...)`\n  - `:macro-require`, which is the namespace symbol in a `(require-macros ...)`\n\n  This is the only function in the lot that also reliably clears\n  namespace aliases.","~:top-fn",["^ ","^U",false,"^X",4,"^R",["^K",[["^M","^N","^1B"],["^M","^N","^1B","^1C"]]],"^J",["^K",[["^M","^N","^1B"],["^M","^N","^1B","^1C"]]],"^T",["^K",[null,null]]]],"^:","~$replumb.ast/dissoc-all","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",17,"^1D",["^ ","^U",false,"^X",4,"^R",["^K",[["^M","^N","^1B"],["^M","^N","^1B","^1C"]]],"^J",["^K",[["^M","^N","^1B"],["^M","^N","^1B","^1C"]]],"^T",["^K",[null,null]]],"^R",["^K",[["^M","^N","^1B"],["^M","^N","^1B","^1C"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",227,"^H",227,"^X",4,"^Y",true,"^J",["^K",[["^M","^N","^1B"],["^M","^N","^1B","^1C"]]],"^P","Dissoc all the required-ns symbols from requirer-ns.\n\n  There are five types of symbol in replumb jargon, which loosely map to\n  `cljs.js` ones. These optionally go in the type parameter as keyword:\n\n  - `:symbol`, the default, for instance my-sym in `(def my-sym 3)`\n  - `:macro`, which comes from a `(defmacro ...)`\n  - `:import`, for instance User in `(import 'foo.bar.User)`\n  - `:require`, which is the namespace symbol in a `(require ...)`\n  - `:macro-require`, which is the namespace symbol in a `(require-macros ...)`\n\n  This is the only function in the lot that also reliably clears\n  namespace aliases."],"~$dissoc-import",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",168,"^G",7,"^H",168,"^I",20,"^J",["^K",["^L",["^K",[["^M","^N","^O"]]]]],"^P","Dissoc the imported symbol from the compiler state."],"^:","~$replumb.ast/dissoc-import","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",20,"^R",["^K",[["^M","^N","^O"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",168,"^V","^W","^H",168,"^X",3,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^N","^O"]]]]],"^P","Dissoc the imported symbol from the compiler state."],"~$imports",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",82,"^G",7,"^H",82,"^I",14,"^J",["^K",["^L",["^K",[["^M","^N"]]]]],"^P","Return imported symbols given compiler state and a namespace: a map\n  of `{symbol1 ns, symbol2 ns, ...}`.\n\n  Note that an `import` symbol is the final segment only, so `User` in\n  the `foo.bar.User`\n\n  You need a `import` in the requirer-ns namespace for this to return\n  something."],"^:","~$replumb.ast/imports","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",14,"^R",["^K",[["^M","^N"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",82,"^V","^W","^H",82,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^N"]]]]],"^P","Return imported symbols given compiler state and a namespace: a map\n  of `{symbol1 ns, symbol2 ns, ...}`.\n\n  Note that an `import` symbol is the final segment only, so `User` in\n  the `foo.bar.User`\n\n  You need a `import` in the requirer-ns namespace for this to return\n  something."],"~$ns-defs",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",42,"^G",7,"^H",42,"^I",14,"^J",["^K",["^L",["^K",[["^M","^["]]]]],"^P","Given compiler state and namespace symbol, returns its AST's `:defs`\n  key content.\n\n  Beware, there can be a lot of data."],"^:","~$replumb.ast/ns-defs","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",14,"^R",["^K",[["^M","^["]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",42,"^V","^W","^H",42,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^["]]]]],"^P","Given compiler state and namespace symbol, returns its AST's `:defs`\n  key content.\n\n  Beware, there can be a lot of data."],"~$known-namespaces",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",6,"^G",7,"^H",6,"^I",23,"^J",["^K",["^L",["^K",[["^M"]]]]],"^P","Given a compiler state, return the seq of namespace symbols currently\n  present in the AST."],"^:","~$replumb.ast/known-namespaces","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",23,"^R",["^K",[["^M"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",6,"^V","^W","^H",6,"^X",1,"^Y",true,"^J",["^K",["^L",["^K",[["^M"]]]]],"^P","Given a compiler state, return the seq of namespace symbols currently\n  present in the AST."],"~$empty-state?",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",280,"^G",7,"^H",280,"^I",19,"^J",["^K",["^L",["^K",[["^M","^N"]]]]],"^P","Return true if the compiler state is empty.\n\n  In other words if `(every? empty? (vals (replumb.ast/get-state ...)`\n  returns true for the input requirer-ns.\n\n  In replumb jargon:\n\n  ```\n  (in-ns 'cljs.user)          ;; requirer-ns\n  (require-macros 'cljs.test) ;; required-ns\n  ```"],"^:","~$replumb.ast/empty-state?","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",19,"^R",["^K",[["^M","^N"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",280,"^V","^11","^H",280,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^N"]]]]],"^P","Return true if the compiler state is empty.\n\n  In other words if `(every? empty? (vals (replumb.ast/get-state ...)`\n  returns true for the input requirer-ns.\n\n  In replumb jargon:\n\n  ```\n  (in-ns 'cljs.user)          ;; requirer-ns\n  (require-macros 'cljs.test) ;; required-ns\n  ```"],"~$ns-macros",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",51,"^G",7,"^H",51,"^I",16,"^J",["^K",["^L",["^K",[["^M","^["]]]]],"^P","Given compiler state and namespace symbol, returns its AST's `:macros`\n  key content.\n\n  Beware, there can be a lot of data."],"^:","~$replumb.ast/ns-macros","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",16,"^R",["^K",[["^M","^["]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",51,"^V","^W","^H",51,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^["]]]]],"^P","Given compiler state and namespace symbol, returns its AST's `:macros`\n  key content.\n\n  Beware, there can be a lot of data."],"~$requires",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",69,"^G",7,"^H",69,"^I",15,"^J",["^K",["^L",["^K",[["^M","^N"]]]]],"^P","Return required symbols given compiler state and namespace: a map of\n  `{ns ns, another-ns another-ns, ...}`.\n\n  Note that `import` also adds something to the AST's `:requires` key of\n  the requirer-ns, see `replumb.ast/dissoc-import`.\n\n  You need a `require` in the requirer-ns namespace for this to return\n  something."],"^:","~$replumb.ast/requires","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",15,"^R",["^K",[["^M","^N"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",69,"^V","^W","^H",69,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^N"]]]]],"^P","Return required symbols given compiler state and namespace: a map of\n  `{ns ns, another-ns another-ns, ...}`.\n\n  Note that `import` also adds something to the AST's `:requires` key of\n  the requirer-ns, see `replumb.ast/dissoc-import`.\n\n  You need a `require` in the requirer-ns namespace for this to return\n  something."],"^9",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",28,"^G",7,"^H",28,"^I",17,"^J",["^K",["^L",["^K",[["^M","^["]]]]],"^P","Given compiler state and namespace symbol return all the vars in the\n  AST.\n\n  Analogous to `cljs.analyzer/ns-interns`, but it returns analysis maps\n  not vars.\n\n  Beware, there can be a lot of data."],"^:","~$replumb.ast/ns-interns","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",17,"^R",["^K",[["^M","^["]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",28,"^V","^W","^H",28,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^["]]]]],"^P","Given compiler state and namespace symbol return all the vars in the\n  AST.\n\n  Analogous to `cljs.analyzer/ns-interns`, but it returns analysis maps\n  not vars.\n\n  Beware, there can be a lot of data."],"~$macro-requires",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",115,"^G",7,"^H",115,"^I",21,"^J",["^K",["^L",["^K",[["^M","^N"]]]]],"^P","Return all the required macro namespaces given compiler state and a\n  namespace: a map of `{macro-ns1 macro-ns1, macro-ns2 macro-ns2, ...}`.\n\n  You need a `require-macros` in the requirer-ns namespace for this to\n  return something."],"^:","~$replumb.ast/macro-requires","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",21,"^R",["^K",[["^M","^N"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",115,"^V","^W","^H",115,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^N"]]]]],"^P","Return all the required macro namespaces given compiler state and a\n  namespace: a map of `{macro-ns1 macro-ns1, macro-ns2 macro-ns2, ...}`.\n\n  You need a `require-macros` in the requirer-ns namespace for this to\n  return something."],"~$dissoc-ns",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",155,"^G",7,"^H",155,"^I",16,"^J",["^K",["^L",["^K",[["^M","^["]]]]],"^P","Dissoc the namespace symbol from the compiler state."],"^:","~$replumb.ast/dissoc-ns","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",16,"^R",["^K",[["^M","^["]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",155,"^V","^W","^H",155,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^["]]]]],"^P","Dissoc the namespace symbol from the compiler state."],"~$dissoc-macro-require",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",205,"^G",7,"^H",205,"^I",27,"^J",["^K",["^L",["^K",[["^M","^N","^1B"]]]]],"^P","Dissoc the macro required-ns from requirer-ns.\n\n  For instance after:\n\n  ```\n  (in-ns 'cljs.user)          ;; requirer-ns\n  (require-macros 'cljs.test) ;; required-ns\n  ```\n\n  You can use the following to clean the compiler state:\n\n  ```\n  (dissoc-macro-require repl/st 'cljs.user 'cljs.test)\n  ```\n\n  This util function does not remove aliases. See\n  `replumb.ast/dissoc-all`."],"^:","~$replumb.ast/dissoc-macro-require","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",27,"^R",["^K",[["^M","^N","^1B"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",205,"^V","^W","^H",205,"^X",3,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^N","^1B"]]]]],"^P","Dissoc the macro required-ns from requirer-ns.\n\n  For instance after:\n\n  ```\n  (in-ns 'cljs.user)          ;; requirer-ns\n  (require-macros 'cljs.test) ;; required-ns\n  ```\n\n  You can use the following to clean the compiler state:\n\n  ```\n  (dissoc-macro-require repl/st 'cljs.user 'cljs.test)\n  ```\n\n  This util function does not remove aliases. See\n  `replumb.ast/dissoc-all`."],"~$dissoc-require",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",183,"^G",7,"^H",183,"^I",21,"^J",["^K",["^L",["^K",[["^M","^N","^1B"]]]]],"^P","Dissoc the required-ns from requirer-ns.\n\n  For instance after:\n\n  ```\n  (in-ns 'cljs.user)        ;; requirer-ns\n  (require 'clojure.string) ;; required-ns\n  ```\n\n  You can use the following to clean the compiler state:\n\n  ```\n  (dissoc-require repl/st 'cljs.user 'clojure.string)\n  ```\n\n  This util function does not remove aliases. See\n  `replumb.ast/dissoc-all`."],"^:","~$replumb.ast/dissoc-require","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",21,"^R",["^K",[["^M","^N","^1B"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",183,"^V","^W","^H",183,"^X",3,"^Y",true,"^J",["^K",["^L",["^K",[["^M","^N","^1B"]]]]],"^P","Dissoc the required-ns from requirer-ns.\n\n  For instance after:\n\n  ```\n  (in-ns 'cljs.user)        ;; requirer-ns\n  (require 'clojure.string) ;; required-ns\n  ```\n\n  You can use the following to clean the compiler state:\n\n  ```\n  (dissoc-require repl/st 'cljs.user 'clojure.string)\n  ```\n\n  This util function does not remove aliases. See\n  `replumb.ast/dissoc-all`."],"~$import-of-ns?",["^ ","^C",null,"^D",["^ ","^E","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/replumb/ast.cljs","^F",140,"^G",7,"^H",140,"^I",20,"^J",["^K",["^L",["^K",[["^[","^O"]]]]],"^P","Yields true when sym belongs to ns.\n\n  This typically works on the output of `replumb.ast/imports`."],"^:","~$replumb.ast/import-of-ns?","^E","resources/public/js/compiled/out/replumb/ast.cljs","^I",20,"^R",["^K",[["^[","^O"]]],"^S",null,"^T",["^K",[null,null]],"^G",1,"^U",false,"^F",140,"^V","^W","^H",140,"^X",2,"^Y",true,"^J",["^K",["^L",["^K",[["^[","^O"]]]]],"^P","Yields true when sym belongs to ns.\n\n  This typically works on the output of `replumb.ast/imports`."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:cljs.analyzer/namespaces","~:private","^4","~:macros","~:symbol","^<","^=","~:macro-requires","^@","^A","^24","~:symbols"]],"~:order",["^27","^28","^29","^A","^=","^<","^@","^4","^24","^2:","^2;","^2<"]],"^P","Thin layer of helpers over the ClojureScript Abstract syntax tree (AST)"]