["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Date",["^ "],"~$Error",["^ "],"~$setInterval",["^ "],"~$clearInterval",["^ "],"~$setTimeout",["^ "],"~$clearTimeout",["^ "],"~$window",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$reanimated.core","~:imports",null,"~:requires",["^ ","~$reagent","~$reagent.core","^B","^B","~$events","~$goog.events","^D","^D","~$EventType","~$goog.events.EventType","^F","^F","~$dom","~$goog.dom","^H","^H"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$interval",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","~:line",239,"~:column",7,"~:end-line",239,"~:end-column",15,"~:arglists",["~#list",["~$quote",["^U",[["~$f","~$t"]]]]],"~:doc","Call function f every period t while mounted in the DOM."],"^=","~$reanimated.core/interval","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",15,"~:method-params",["^U",[["~$f","~$t"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^Q",1,"~:variadic?",false,"^P",239,"~:ret-tag","~$any","^R",239,"~:max-fixed-arity",2,"~:fn-var",true,"^T",["^U",["^V",["^U",[["~$f","~$t"]]]]],"^W","Call function f every period t while mounted in the DOM."],"~$timeline",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",302,"^Q",7,"^R",302,"^S",15,"^T",["^U",["^V",["^U",[["~$x","~$&","~$xs"]]]]],"^W","Given a sequence of inputs, will consume them depending on their type:\n  numbers will be a sleep in milliseconds\n  functions will be called with no arguments\n  vectors will be rendered as reagent components.","~:top-fn",["^ ","^10",true,"^13",1,"^Y",[["^U",["~$x","^16"]]],"^T",["^U",[["~$x","~$&","^16"]]],"^[",["^U",[null]]]],"^=","~$reanimated.core/timeline","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",15,"^17",["^ ","^10",true,"^13",1,"^Y",[["^U",["~$x","^16"]]],"^T",["^U",[["~$x","~$&","^16"]]],"^[",["^U",[null]]],"^Y",[["^U",["~$x","^16"]]],"^Z",null,"^[",["^U",[null]],"^Q",1,"^10",true,"^P",302,"^11","^12","^R",302,"^13",1,"^14",true,"^T",["^U",[["~$x","~$&","^16"]]],"^W","Given a sequence of inputs, will consume them depending on their type:\n  numbers will be a sleep in milliseconds\n  functions will be called with no arguments\n  vectors will be rendered as reagent components."],"~$timeout",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",254,"^Q",7,"^R",254,"^S",14,"^T",["^U",["^V",["^U",[["~$f","~$t"]]]]],"^W","Call function f period t in milliseconds after being mounted in the DOM,\n  only if still mounted."],"^=","~$reanimated.core/timeout","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",14,"^Y",["^U",[["~$f","~$t"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",254,"^11","^12","^R",254,"^13",2,"^14",true,"^T",["^U",["^V",["^U",[["~$f","~$t"]]]]],"^W","Call function f period t in milliseconds after being mounted in the DOM,\n  only if still mounted."],"~$and-then",["^ ","^M",null,"^N",["^ ","~:private",true,"^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^S",25,"^17",["^ ","^10",true,"^13",3,"^Y",[["^U",["~$id","~$element","~$x","~$more"]]],"^T",["^U",[["^1=","^1>","~$x","~$&","^1?"]]],"^[",["^U",[null]]],"^Q",17,"^P",270,"^R",270,"^T",["^U",["^V",["^U",[["^1=","^1>","~$x","~$&","^1?"]]]]],"^W","Use timeline instead of this function directly.\n  Provides a way to express a sequence of actions and pauses.\n  Takes an id atom, element ratom,\n  and a sequence of numbers and/or callback functions and/or vectors.\n  Treats numbers as a wait timeout in milliseconds,\n  calls callbacks after the elapsed time.\n  id is reset as the timeout reference for cleanup.\n  element is reset to vectors for rendering. "],"^1<",true,"^=","~$reanimated.core/and-then","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",25,"^17",["^ ","^10",true,"^13",3,"^Y",[["^U",["^1=","^1>","~$x","^1?"]]],"^T",["^U",[["^1=","^1>","~$x","~$&","^1?"]]],"^[",["^U",[null]]],"^Y",[["^U",["^1=","^1>","~$x","^1?"]]],"^Z",null,"^[",["^U",[null]],"^Q",1,"^10",true,"^P",270,"^11","^12","^R",270,"^13",3,"^14",true,"^T",["^U",[["^1=","^1>","~$x","~$&","^1?"]]],"^W","Use timeline instead of this function directly.\n  Provides a way to express a sequence of actions and pauses.\n  Takes an id atom, element ratom,\n  and a sequence of numbers and/or callback functions and/or vectors.\n  Treats numbers as a wait timeout in milliseconds,\n  calls callbacks after the elapsed time.\n  id is reset as the timeout reference for cleanup.\n  element is reset to vectors for rendering. "],"~$stiffness",["^ ","^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",162,"^Q",16,"^R",162,"^S",25,"^1<",true],"^1<",true,"^=","~$reanimated.core/stiffness","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",25,"^Q",1,"^P",162,"^R",162,"~:tag","~$number"],"~$mass",["^ ","^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",161,"^Q",16,"^R",161,"^S",20,"^1<",true],"^1<",true,"^=","~$reanimated.core/mass","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",20,"^Q",1,"^P",161,"^R",161,"^1C","^1D"],"~$pop-when",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",27,"^Q",7,"^R",27,"^S",15,"^T",["^U",["^V",["^U",[["~$condition","~$then"],["^1H","^1I","~$options"]]]]],"^W","Wraps a component to animate creation and destruction.\n  Takes a condition ratom and a vector or value to be rendered.\n  Options can contain duration (milliseconds)\n  and easing (a function that takes a b duration t).","^17",["^ ","^10",false,"^13",3,"^Y",["^U",[["^1H","^1I"],["^1H","^1I","^1J"]]],"^T",["^U",[["^1H","^1I"],["^1H","^1I","^1J"]]],"^[",["^U",[null,null]]]],"^=","~$reanimated.core/pop-when","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",15,"^17",["^ ","^10",false,"^13",3,"^Y",["^U",[["^1H","^1I"],["^1H","^1I","^1J"]]],"^T",["^U",[["^1H","^1I"],["^1H","^1I","^1J"]]],"^[",["^U",[null,null]]],"^Y",["^U",[["^1H","^1I"],["^1H","^1I","^1J"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",27,"^R",27,"^13",3,"^14",true,"^T",["^U",[["^1H","^1I"],["^1H","^1I","^1J"]]],"^W","Wraps a component to animate creation and destruction.\n  Takes a condition ratom and a vector or value to be rendered.\n  Options can contain duration (milliseconds)\n  and easing (a function that takes a b duration t)."],"~$get-scroll-x",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",332,"^Q",7,"^R",332,"^S",19,"^T",["^U",["^V",["^U",[[]]]]],"^W","Gets the current document x scroll position."],"^=","~$reanimated.core/get-scroll-x","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",19,"^Y",["^U",[[]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",332,"^11","^12","^R",332,"^13",0,"^14",true,"^T",["^U",["^V",["^U",[[]]]]],"^W","Gets the current document x scroll position."],"~$scroll-x",["^ ","^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",347,"^Q",6,"^R",347,"^S",14],"^=","~$reanimated.core/scroll-x","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",14,"^Q",1,"^P",347,"^R",347,"^1C","^12","^W","A ratom for watching the current document x scroll,\n  will be updated when there is a scroll event."],"~$now",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",16,"^Q",17,"^R",16,"^S",20,"^1<",true,"^T",["^U",["^V",["^U",[[]]]]]],"^1<",true,"^=","~$reanimated.core/now","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",20,"^Y",["^U",[[]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",16,"^11","~$js/Date","^R",16,"^13",0,"^14",true,"^T",["^U",["^V",["^U",[[]]]]]],"~$evaluate",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",165,"^Q",17,"^R",165,"^S",25,"^1<",true,"^T",["^U",["^V",["^U",[["~$x2","~$dt","~$x","~$v","~$a",["^ ","~:keys",["^1E","^1A","~$damping"]]]]]]],"^W","This is where the spring physics formula is applied."],"^1<",true,"^=","~$reanimated.core/evaluate","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",25,"^Y",["^U",[["^1T","^1U","~$x","~$v","~$a","~$p__27309"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",165,"^11","~$cljs.core/IVector","^R",165,"^13",6,"^14",true,"^T",["^U",["^V",["^U",[["^1T","^1U","~$x","~$v","~$a",["^ ","^1V",["^1E","^1A","^1W"]]]]]]],"^W","This is where the spring physics formula is applied."],"~$get-scroll-y",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",323,"^Q",7,"^R",323,"^S",19,"^T",["^U",["^V",["^U",[[]]]]],"^W","Gets the current document y scroll position."],"^=","~$reanimated.core/get-scroll-y","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",19,"^Y",["^U",[[]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",323,"^11","^12","^R",323,"^13",0,"^14",true,"^T",["^U",["^V",["^U",[[]]]]],"^W","Gets the current document y scroll position."],"~$scroll-y",["^ ","^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",337,"^Q",6,"^R",337,"^S",14],"^=","~$reanimated.core/scroll-y","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",14,"^Q",1,"^P",337,"^R",337,"^1C","^12","^W","A ratom for watching the current document y scroll,\n  will be updated when there is a scroll event."],"~$toggle-handler",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",55,"^Q",7,"^R",55,"^S",21,"^T",["^U",["^V",["^U",[["~$ratom"]]]]],"^W","Creates an event handler that will toggle a given ratom."],"^=","~$reanimated.core/toggle-handler","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",21,"^Y",["^U",[["^24"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",55,"^11","~$function","^R",55,"^13",1,"^14",true,"^T",["^U",["^V",["^U",[["^24"]]]]],"^W","Creates an event handler that will toggle a given ratom."],"~$mouse-watcher",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",62,"^Q",7,"^R",62,"^S",20,"^T",["^U",["^V",["^U",[["^24"]]]]],"^W","Returns a map suitable for merging with component properties,\n  that will keep a given ratom updated with the mouseover status."],"^=","~$reanimated.core/mouse-watcher","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",20,"^Y",["^U",[["^24"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",62,"^11","~$cljs.core/IMap","^R",62,"^13",1,"^14",true,"^T",["^U",["^V",["^U",[["^24"]]]]],"^W","Returns a map suitable for merging with component properties,\n  that will keep a given ratom updated with the mouseover status."],"~$interpolate-to",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",102,"^Q",7,"^R",102,"^S",21,"^T",["^U",["^V",["^U",[["~$x"],["~$x","^1J"]]]]],"^W","Interpolates toward new values.\n  Takes a ratom which stores a numeric value.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t).","^17",["^ ","^10",false,"^13",2,"^Y",["^U",[["~$x"],["~$x","^1J"]]],"^T",["^U",[["~$x"],["~$x","^1J"]]],"^[",["^U",[null,null]]]],"^=","~$reanimated.core/interpolate-to","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",21,"^17",["^ ","^10",false,"^13",2,"^Y",["^U",[["~$x"],["~$x","^1J"]]],"^T",["^U",[["~$x"],["~$x","^1J"]]],"^[",["^U",[null,null]]],"^Y",["^U",[["~$x"],["~$x","^1J"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",102,"^R",102,"^13",2,"^14",true,"^T",["^U",[["~$x"],["~$x","^1J"]]],"^W","Interpolates toward new values.\n  Takes a ratom which stores a numeric value.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t)."],"~$interpolate",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",19,"^Q",17,"^R",19,"^S",28,"^1<",true,"^T",["^U",["^V",["^U",[["~$a","~$b","~$duration","~$t"]]]]],"^W","Calculates a value between a and b relative to t in duration."],"^1<",true,"^=","~$reanimated.core/interpolate","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",28,"^Y",["^U",[["~$a","~$b","^2=","~$t"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",19,"^11",["^<",[null,"^1D"]],"^R",19,"^13",4,"^14",true,"^T",["^U",["^V",["^U",[["~$a","~$b","^2=","~$t"]]]]],"^W","Calculates a value between a and b relative to t in duration."],"~$integrate-rk4",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",174,"^Q",17,"^R",174,"^S",30,"^1<",true,"^T",["^U",["^V",["^U",[["^1T","^1U","~$x","~$v","^1J"]]]]],"^W","Takes an itegration step from numbers x to x2 over time dt,\n  with a present velocity v."],"^1<",true,"^=","~$reanimated.core/integrate-rk4","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",30,"^Y",["^U",[["^1T","^1U","~$x","~$v","^1J"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",174,"^11","^1Z","^R",174,"^13",5,"^14",true,"^T",["^U",["^V",["^U",[["^1T","^1U","~$x","~$v","^1J"]]]]],"^W","Takes an itegration step from numbers x to x2 over time dt,\n  with a present velocity v."],"~$small",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",187,"^Q",17,"^R",187,"^S",22,"^1<",true,"^T",["^U",["^V",["^U",[["~$x"]]]]]],"^1<",true,"^=","~$reanimated.core/small","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",22,"^Y",["^U",[["~$x"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",187,"^11","~$boolean","^R",187,"^13",1,"^14",true,"^T",["^U",["^V",["^U",[["~$x"]]]]]],"~$interpolate-if",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",76,"^Q",7,"^R",76,"^S",21,"^T",["^U",["^V",["^U",[["^1H","~$a","~$b"],["^1H","~$a","~$b","^1J"]]]]],"^W","Interpolates between two values when the conditon changes.\n  Takes a condition ratom to watch, and 2 vectors or values to render.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t).","^17",["^ ","^10",false,"^13",4,"^Y",["^U",[["^1H","~$a","~$b"],["^1H","~$a","~$b","^1J"]]],"^T",["^U",[["^1H","~$a","~$b"],["^1H","~$a","~$b","^1J"]]],"^[",["^U",[null,null]]]],"^=","~$reanimated.core/interpolate-if","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",21,"^17",["^ ","^10",false,"^13",4,"^Y",["^U",[["^1H","~$a","~$b"],["^1H","~$a","~$b","^1J"]]],"^T",["^U",[["^1H","~$a","~$b"],["^1H","~$a","~$b","^1J"]]],"^[",["^U",[null,null]]],"^Y",["^U",[["^1H","~$a","~$b"],["^1H","~$a","~$b","^1J"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",76,"^R",76,"^13",4,"^14",true,"^T",["^U",[["^1H","~$a","~$b"],["^1H","~$a","~$b","^1J"]]],"^W","Interpolates between two values when the conditon changes.\n  Takes a condition ratom to watch, and 2 vectors or values to render.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t)."],"~$spring",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",190,"^Q",7,"^R",190,"^S",13,"^T",["^U",["^V",["^U",[["^1T"],["^1T","^1J"]]]]],"^W","Useful for wrapping a value in your component to make it springy.\n  Returns a reaction that will take values approaching x2,\n  updating every time Reagent calls requestAnimationFrame.\n  Integrates a physical spring simulation for each step.\n  Options can contain:\n  from - a value to start from (initial value is used if absent).\n  velocity of the mass on the spring (initially 0 if absent).\n  mass, stiffness, damping of the spring.","^17",["^ ","^10",false,"^13",2,"^Y",["^U",[["^1T"],["^1T","^1J"]]],"^T",["^U",[["^1T"],["^1T","^1J"]]],"^[",["^U",[null,null]]]],"^=","~$reanimated.core/spring","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",13,"^17",["^ ","^10",false,"^13",2,"^Y",["^U",[["^1T"],["^1T","^1J"]]],"^T",["^U",[["^1T"],["^1T","^1J"]]],"^[",["^U",[null,null]]],"^Y",["^U",[["^1T"],["^1T","^1J"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",190,"^R",190,"^13",2,"^14",true,"^T",["^U",[["^1T"],["^1T","^1J"]]],"^W","Useful for wrapping a value in your component to make it springy.\n  Returns a reaction that will take values approaching x2,\n  updating every time Reagent calls requestAnimationFrame.\n  Integrates a physical spring simulation for each step.\n  Options can contain:\n  from - a value to start from (initial value is used if absent).\n  velocity of the mass on the spring (initially 0 if absent).\n  mass, stiffness, damping of the spring."],"^1W",["^ ","^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",163,"^Q",16,"^R",163,"^S",23,"^1<",true],"^1<",true,"^=","~$reanimated.core/damping","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",23,"^Q",1,"^P",163,"^R",163,"^1C","^1D"],"~$interpolate-arg",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",135,"^Q",7,"^R",135,"^S",22,"^T",["^U",["^V",["^U",[["~$component","~$x"],["^2J","~$x","^1J"]]]]],"^W","Interpolates the argument of a component to x.\n  Will call the given component with values approaching x.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t).","^17",["^ ","^10",false,"^13",3,"^Y",["^U",[["^2J","~$x"],["^2J","~$x","^1J"]]],"^T",["^U",[["^2J","~$x"],["^2J","~$x","^1J"]]],"^[",["^U",[null,null]]]],"^=","~$reanimated.core/interpolate-arg","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",22,"^17",["^ ","^10",false,"^13",3,"^Y",["^U",[["^2J","~$x"],["^2J","~$x","^1J"]]],"^T",["^U",[["^2J","~$x"],["^2J","~$x","^1J"]]],"^[",["^U",[null,null]]],"^Y",["^U",[["^2J","~$x"],["^2J","~$x","^1J"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",135,"^R",135,"^13",3,"^14",true,"^T",["^U",[["^2J","~$x"],["^2J","~$x","^1J"]]],"^W","Interpolates the argument of a component to x.\n  Will call the given component with values approaching x.\n  Options can contain duration (in milliseconds)\n  and easing (a function of a b duration t)."],"~$scroll",["^ ","^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",342,"^Q",6,"^R",342,"^S",12],"^=","~$reanimated.core/scroll","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",12,"^Q",1,"^P",342,"^R",342,"^1C","^12","^W","A ratom for watching the current document y scroll,\n  will be updated when there is a scroll event."],"~$get-scroll",["^ ","^=","~$reanimated.core/get-scroll","^O","resources/public/js/compiled/out/reanimated/core.cljs","^P",328,"^Q",1,"^R",328,"^S",16,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",328,"^Q",6,"^R",328,"^S",16],"^W","Gets the current document y scroll position."],"~$watch",["^ ","^M",null,"^N",["^ ","^O","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/reanimated/core.cljs","^P",224,"^Q",7,"^R",224,"^S",12,"^T",["^U",["^V",["^U",[["~$r","~$f"]]]]],"^W","Watch a ref only while mounted in the DOM."],"^=","~$reanimated.core/watch","^O","resources/public/js/compiled/out/reanimated/core.cljs","^S",12,"^Y",["^U",[["~$r","~$f"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",224,"^11","^12","^R",224,"^13",2,"^14",true,"^T",["^U",["^V",["^U",[["~$r","~$f"]]]]],"^W","Watch a ref only while mounted in the DOM."]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^24","~$reagent.ratom","^2T","^2T","^A","^B","^B","^B"],"~:cljs.analyzer/constants",["^ ","~:seen",["^<",["~:mass","~:v","~:transform","~:frame","~:else","~:on-mouse-out","~:component-did-mount","~:start","~:easing","~:duration","~:style","~:div","~:damping","~:reagent-render","~:from","~:opacity","~:condition","~:current","~:at","~:component-will-unmount","~:display-name","~:on-mouse-over","~:t","~:x","~:p","~:velocity","~:stiffness","~:to"]],"~:order",["^2Z","^38","^31","^2Y","^33","^32","^35","^34","^2X","^39","^3?","^2[","^3:","^3<","^3B","^3;","^2W","^3A","^36","^3@","~:t","~:x","~:v","^3>","^30","^3=","^37","~:p"]],"^W","An animation library for Reagent (ClojureScript).\n  There is only one concept:\n  A reaction that moves toward some target,\n  each step triggers another update until it reaches the end state.\n  The trigger occurs by touching a local atom a zero timeout,\n  which changes the atom in the next Reagent render."]