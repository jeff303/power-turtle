["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$Date",["^ ","~$prototype",["^ ","~$getTime",["^ "]]],"~$setTimeout",["^ "]],"~:use-macros",["^ ","~$all","~$clojure-turtle.macros","~$repeat","^:"],"~:excludes",["~#set",["^;"]],"~:name","~$clojure-turtle.core","~:imports",null,"~:requires",["^ ","~$q","~$quil.core","^B","^B","^:","^:"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$turtle",["^ ","~:meta",["^ ","~:file","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","~:line",80,"~:column",3,"~:end-line",80,"~:end-column",9,"~:doc","The default turtle entity used when no turtle is specified for an operation."],"^>","~$clojure-turtle.core/turtle","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",9,"^J",1,"^I",79,"^K",80,"~:tag","~$any","^M","The default turtle entity used when no turtle is specified for an operation."],"~$draw",["^ ","~:protocol-inline",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",424,"^J",7,"^K",424,"^L",11,"~:arglists",["~#list",["~$quote",["^T",[[]]]]],"^M","The function passed to Quil for doing rendering."],"^>","~$clojure-turtle.core/draw","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",11,"~:method-params",["^T",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^J",1,"~:variadic?",false,"^I",424,"~:ret-tag","^P","^K",424,"~:max-fixed-arity",0,"~:fn-var",true,"^S",["^T",["^U",["^T",[[]]]]],"^M","The function passed to Quil for doing rendering."],"~$reset-rendering",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",294,"^J",7,"^K",294,"^L",22,"^S",["^T",["^U",["^T",[[]]]]],"^M","A helper function for the Quil rendering function."],"^>","~$clojure-turtle.core/reset-rendering","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",22,"^W",["^T",[[]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",294,"^[","^P","^K",294,"^10",0,"^11",true,"^S",["^T",["^U",["^T",[[]]]]],"^M","A helper function for the Quil rendering function."],"~$end-fill",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",205,"^J",7,"^K",205,"^L",15,"^S",["^T",["^U",["^T",[[],["~$turt-state"]]]]],"^M","Stop filling the area of turtle moves. Must be called start-fill.","~:top-fn",["^ ","^Z",false,"^10",1,"^W",["^T",[[],["^15"]]],"^S",["^T",[[],["^15"]]],"^Y",["^T",[null,null]]]],"^>","~$clojure-turtle.core/end-fill","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",15,"^16",["^ ","^Z",false,"^10",1,"^W",["^T",[[],["^15"]]],"^S",["^T",[[],["^15"]]],"^Y",["^T",[null,null]]],"^W",["^T",[[],["^15"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",205,"^K",205,"^10",1,"^11",true,"^S",["^T",[[],["^15"]]],"^M","Stop filling the area of turtle moves. Must be called start-fill."],"~$clean",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",245,"^J",7,"^K",245,"^L",12,"^S",["^T",["^U",["^T",[[],["^15"]]]]],"^M","Clear the lines state, which effectively clears the drawing canvas.","^16",["^ ","^Z",false,"^10",1,"^W",["^T",[[],["^15"]]],"^S",["^T",[[],["^15"]]],"^Y",["^T",[null,null]]]],"^>","~$clojure-turtle.core/clean","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",12,"^16",["^ ","^Z",false,"^10",1,"^W",["^T",[[],["^15"]]],"^S",["^T",[[],["^15"]]],"^Y",["^T",[null,null]]],"^W",["^T",[[],["^15"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",245,"^K",245,"^10",1,"^11",true,"^S",["^T",[[],["^15"]]],"^M","Clear the lines state, which effectively clears the drawing canvas."],"~$left",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",138,"^J",7,"^K",138,"^L",11,"^S",["^T",["^U",["^T",[["~$ang"],["^15","^1;"]]]]],"^M","Same as right, but turns the turtle counter-clockwise.","^16",["^ ","^Z",false,"^10",2,"^W",["^T",[["^1;"],["^15","^1;"]]],"^S",["^T",[["^1;"],["^15","^1;"]]],"^Y",["^T",[null,null]]]],"^>","~$clojure-turtle.core/left","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",11,"^16",["^ ","^Z",false,"^10",2,"^W",["^T",[["^1;"],["^15","^1;"]]],"^S",["^T",[["^1;"],["^15","^1;"]]],"^Y",["^T",[null,null]]],"^W",["^T",[["^1;"],["^15","^1;"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",138,"^K",138,"^10",2,"^11",true,"^S",["^T",[["^1;"],["^15","^1;"]]],"^M","Same as right, but turns the turtle counter-clockwise."],"~$atan",["^ ","^>","~$clojure-turtle.core/atan","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",149,"^J",1,"^K",149,"^L",10,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",149,"^J",6,"^K",149,"^L",10]],"~$if-cljs",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",429,"^J",11,"^K",429,"^L",18,"~:macro",true,"^S",["^T",["^U",["^T",[["~$then","~$else"]]]]],"^M","Executes `then` clause iff generating ClojureScript code. Stolen from Prismatic code.\n  Ref. http://goo.gl/DhhhSN, http://goo.gl/Bhdyna."],"^>","~$clojure-turtle.core/if-cljs","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",18,"^W",["^T",[["~$&form","~$&env","^1A","^1B"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",429,"^1@",true,"^K",429,"^10",4,"^11",false,"^S",["^T",["^U",["^T",[["^1A","^1B"]]]]],"^M","Executes `then` clause iff generating ClojureScript code. Stolen from Prismatic code.\n  Ref. http://goo.gl/DhhhSN, http://goo.gl/Bhdyna."],"~$setxy",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",258,"^J",7,"^K",258,"^L",12,"^S",["^T",["^U",["^T",[["~$x","~$y"],["^15","~$x","~$y"]]]]],"^M","Set the position of turtle turt to x-coordinate x and y-coordinate y.","^16",["^ ","^Z",false,"^10",3,"^W",["^T",[["~$x","~$y"],["^15","~$x","~$y"]]],"^S",["^T",[["~$x","~$y"],["^15","~$x","~$y"]]],"^Y",["^T",[null,null]]]],"^>","~$clojure-turtle.core/setxy","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",12,"^16",["^ ","^Z",false,"^10",3,"^W",["^T",[["~$x","~$y"],["^15","~$x","~$y"]]],"^S",["^T",[["~$x","~$y"],["^15","~$x","~$y"]]],"^Y",["^T",[null,null]]],"^W",["^T",[["~$x","~$y"],["^15","~$x","~$y"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",258,"^K",258,"^10",3,"^11",true,"^S",["^T",[["~$x","~$y"],["^15","~$x","~$y"]]],"^M","Set the position of turtle turt to x-coordinate x and y-coordinate y."],"~$home",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",282,"^J",7,"^K",282,"^L",11,"^S",["^T",["^U",["^T",[[],["^15"]]]]],"^M","Set the turtle at coordinates (0,0), facing up (heading = 90 degrees)","^16",["^ ","^Z",false,"^10",1,"^W",["^T",[[],["^15"]]],"^S",["^T",[[],["^15"]]],"^Y",["^T",[null,null]]]],"^>","~$clojure-turtle.core/home","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",11,"^16",["^ ","^Z",false,"^10",1,"^W",["^T",[[],["^15"]]],"^S",["^T",[[],["^15"]]],"^Y",["^T",[null,null]]],"^W",["^T",[[],["^15"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",282,"^K",282,"^10",1,"^11",true,"^S",["^T",[[],["^15"]]],"^M","Set the turtle at coordinates (0,0), facing up (heading = 90 degrees)"],"~$get-turtle-sprite",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",310,"^J",7,"^K",310,"^L",24,"^S",["^T",["^U",["^T",[[],["~$turt"]]]]],"^M","A helper function that draws the triangle that represents the turtle onto the screen.","^16",["^ ","^Z",false,"^10",1,"^W",["^T",[[],["^1K"]]],"^S",["^T",[[],["^1K"]]],"^Y",["^T",[null,null]]]],"^>","~$clojure-turtle.core/get-turtle-sprite","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",24,"^16",["^ ","^Z",false,"^10",1,"^W",["^T",[[],["^1K"]]],"^S",["^T",[[],["^1K"]]],"^Y",["^T",[null,null]]],"^W",["^T",[[],["^1K"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",310,"^K",310,"^10",1,"^11",true,"^S",["^T",[[],["^1K"]]],"^M","A helper function that draws the triangle that represents the turtle onto the screen."],"~$alter-turtle",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",82,"^J",7,"^K",82,"^L",19,"^S",["^T",["^U",["^T",[["^15","~$f"]]]]],"^M","A helper function used in the implementation of basic operations to abstract\n  out the interface of applying a function to a turtle entity."],"^>","~$clojure-turtle.core/alter-turtle","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",19,"^W",["^T",[["^15","~$f"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",82,"^K",82,"^10",2,"^11",true,"^S",["^T",["^U",["^T",[["^15","~$f"]]]]],"^M","A helper function used in the implementation of basic operations to abstract\n  out the interface of applying a function to a turtle entity."],"~$color",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",106,"^J",7,"^K",106,"^L",12,"^S",["^T",["^U",["^T",[["~$c"],["^15","~$c"]]]]],"^M","Set the turtle's color using [red green blue].\n  RGB values are in the range 0 to 255, inclusive.","^16",["^ ","^Z",false,"^10",2,"^W",["^T",[["~$c"],["^15","~$c"]]],"^S",["^T",[["~$c"],["^15","~$c"]]],"^Y",["^T",[null,null]]]],"^>","~$clojure-turtle.core/color","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",12,"^16",["^ ","^Z",false,"^10",2,"^W",["^T",[["~$c"],["^15","~$c"]]],"^S",["^T",[["~$c"],["^15","~$c"]]],"^Y",["^T",[null,null]]],"^W",["^T",[["~$c"],["^15","~$c"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",106,"^K",106,"^10",2,"^11",true,"^S",["^T",[["~$c"],["^15","~$c"]]],"^M","Set the turtle's color using [red green blue].\n  RGB values are in the range 0 to 255, inclusive."],"~$start-fill",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",194,"^J",7,"^K",194,"^L",17,"^S",["^T",["^U",["^T",[[],["^15"]]]]],"^M","Make the turtle fill the area created by his subsequent moves, until end-fill is called.","^16",["^ ","^Z",false,"^10",1,"^W",["^T",[[],["^15"]]],"^S",["^T",[[],["^15"]]],"^Y",["^T",[null,null]]]],"^>","~$clojure-turtle.core/start-fill","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",17,"^16",["^ ","^Z",false,"^10",1,"^W",["^T",[[],["^15"]]],"^S",["^T",[[],["^15"]]],"^Y",["^T",[null,null]]],"^W",["^T",[[],["^15"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",194,"^K",194,"^10",1,"^11",true,"^S",["^T",[[],["^15"]]],"^M","Make the turtle fill the area created by his subsequent moves, until end-fill is called."],"~$pendown",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",184,"^J",7,"^K",184,"^L",14,"^S",["^T",["^U",["^T",[[],["^15"]]]]],"^M","Instruct the turtle to put its pen down. Subsequent movements will draw to screen.","^16",["^ ","^Z",false,"^10",1,"^W",["^T",[[],["^15"]]],"^S",["^T",[[],["^15"]]],"^Y",["^T",[null,null]]]],"^>","~$clojure-turtle.core/pendown","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",14,"^16",["^ ","^Z",false,"^10",1,"^W",["^T",[[],["^15"]]],"^S",["^T",[[],["^15"]]],"^Y",["^T",[null,null]]],"^W",["^T",[[],["^15"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",184,"^K",184,"^10",1,"^11",true,"^S",["^T",[[],["^15"]]],"^M","Instruct the turtle to put its pen down. Subsequent movements will draw to screen."],"~$DEFAULT-COLOR",["^ ","^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",32,"^J",3,"^K",32,"^L",16,"^M","The default color to be used (ex: if color is not specified)"],"^>","~$clojure-turtle.core/DEFAULT-COLOR","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",16,"^J",1,"^I",31,"^K",32,"^O","~$cljs.core/IVector","^M","The default color to be used (ex: if color is not specified)"],"~$forward",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",151,"^J",7,"^K",151,"^L",14,"^S",["^T",["^U",["^T",[["~$len"],["^15","^1Y"]]]]],"^M","Move the turtle turt forward in the direction that it is facing by length len.","^16",["^ ","^Z",false,"^10",2,"^W",["^T",[["^1Y"],["^15","^1Y"]]],"^S",["^T",[["^1Y"],["^15","^1Y"]]],"^Y",["^T",[null,null]]]],"^>","~$clojure-turtle.core/forward","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",14,"^16",["^ ","^Z",false,"^10",2,"^W",["^T",[["^1Y"],["^15","^1Y"]]],"^S",["^T",[["^1Y"],["^15","^1Y"]]],"^Y",["^T",[null,null]]],"^W",["^T",[["^1Y"],["^15","^1Y"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",151,"^K",151,"^10",2,"^11",true,"^S",["^T",[["^1Y"],["^15","^1Y"]]],"^M","Move the turtle turt forward in the direction that it is facing by length len."],"~$Turtle",["^ ","~:num-fields",8,"~:protocols",["^=",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$clojure-turtle.core/Object","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^>","~$clojure-turtle.core/Turtle","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",18,"~:type",true,"^J",12,"~:internal-ctor",true,"^I",38,"~:record",true,"^K",38,"^O","~$function","~:skip-protocol-flag",["^=",["^22","^23","^24","^25","^26","^27","^28","^29","^2:","^2;","^2<","^2>","^2?","^2@","^2A"]]],"~$radians->deg",["^ ","^>","~$clojure-turtle.core/radians->deg","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",147,"^J",1,"^K",147,"^L",18,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",147,"^J",6,"^K",147,"^L",18]],"~$map->Turtle",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",18,"^J",12,"^2D",true,"~:factory","~:map","^I",38,"^K",38,"^S",["^T",["^U",["^T",[["~$G__27173"]]]]],"^M","Factory function for clojure-turtle.core/Turtle, taking a map of keywords to field values."],"^>","~$clojure-turtle.core/map->Turtle","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",18,"^W",["^T",[["^2M"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^2D",true,"^Z",false,"^2K","^2L","^I",38,"^[","^2B","^K",38,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["^2M"]]]]],"^M","Factory function for clojure-turtle.core/Turtle, taking a map of keywords to field values."],"~$new-window",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",21,"^16",["^ ","^Z",true,"^10",0,"^W",["^T",[["^T",[["~$config"]]]]],"^S",["^T",[["~$&",["^2P"]]]],"^Y",["^T",[null]]],"^J",11,"^I",436,"^1@",true,"^K",436,"^S",["^T",["^U",["^T",[["~$&",["^2P"]]]]]],"^M","Opens up a new window that shows the turtle rendering canvas.  In CLJS it will render\n  to a new HTML5 canvas object. An optional config map can be provided, where the key\n  :title indicates the window title (clj), the :size key indicates a vector of 2 values\n  indicating the width and height of the window."],"^>","~$clojure-turtle.core/new-window","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",21,"^16",["^ ","^Z",true,"^10",0,"^W",["^T",[["^T",[["^2P"]]]]],"^S",["^T",[["~$&",["^2P"]]]],"^Y",["^T",[null]]],"^W",["^T",[["^T",[["^2P"]]]]],"^X",null,"^Y",["^T",[null]],"^J",1,"^Z",true,"^I",436,"^1@",true,"^[","^P","^K",436,"^10",0,"^11",false,"^S",["^T",[["~$&",["^2P"]]]],"^M","Opens up a new window that shows the turtle rendering canvas.  In CLJS it will render\n  to a new HTML5 canvas object. An optional config map can be provided, where the key\n  :title indicates the window title (clj), the :size key indicates a vector of 2 values\n  indicating the width and height of the window."],"~$make-opaque",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",93,"^J",7,"^K",93,"^L",18,"^S",["^T",["^U",["^T",[["~$color-vec"]]]]],"^M","Take a color vector, as passed to the `color` fn, and return a color vector\n  in the form [red blue green alpha], where all RGB and alpha values are integers\n  in the range 0-255 inclusive. In order to make the color vector represent full\n  opacity, the alpha value will be 255."],"^>","~$clojure-turtle.core/make-opaque","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",18,"^W",["^T",[["^2S"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",93,"^[","^P","^K",93,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["^2S"]]]]],"^M","Take a color vector, as passed to the `color` fn, and return a color vector\n  in the form [red blue green alpha], where all RGB and alpha values are integers\n  in the range 0-255 inclusive. In order to make the color vector represent full\n  opacity, the alpha value will be 255."],"~$penup",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",174,"^J",7,"^K",174,"^L",12,"^S",["^T",["^U",["^T",[[],["^15"]]]]],"^M","Instruct the turtle to pick its pen up. Subsequent movements will not draw to screen until the pen is put down again.","^16",["^ ","^Z",false,"^10",1,"^W",["^T",[[],["^15"]]],"^S",["^T",[[],["^15"]]],"^Y",["^T",[null,null]]]],"^>","~$clojure-turtle.core/penup","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",12,"^16",["^ ","^Z",false,"^10",1,"^W",["^T",[[],["^15"]]],"^S",["^T",[[],["^15"]]],"^Y",["^T",[null,null]]],"^W",["^T",[[],["^15"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",174,"^K",174,"^10",1,"^11",true,"^S",["^T",[[],["^15"]]],"^M","Instruct the turtle to pick its pen up. Subsequent movements will not draw to screen until the pen is put down again."],"~$setheading",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",271,"^J",7,"^K",271,"^L",17,"^S",["^T",["^U",["^T",[["^1;"],["^15","^1;"]]]]],"^M","Set the direction which the turtle is facing, given in degrees, where 0 is to the right,\n  90 is up, 180 is left, and 270 is down.","^16",["^ ","^Z",false,"^10",2,"^W",["^T",[["^1;"],["^15","^1;"]]],"^S",["^T",[["^1;"],["^15","^1;"]]],"^Y",["^T",[null,null]]]],"^>","~$clojure-turtle.core/setheading","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",17,"^16",["^ ","^Z",false,"^10",2,"^W",["^T",[["^1;"],["^15","^1;"]]],"^S",["^T",[["^1;"],["^15","^1;"]]],"^Y",["^T",[null,null]]],"^W",["^T",[["^1;"],["^15","^1;"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",271,"^K",271,"^10",2,"^11",true,"^S",["^T",[["^1;"],["^15","^1;"]]],"^M","Set the direction which the turtle is facing, given in degrees, where 0 is to the right,\n  90 is up, 180 is left, and 270 is down."],"~$setup",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",301,"^J",7,"^K",301,"^L",12,"^S",["^T",["^U",["^T",[[]]]]],"^M","A helper function for the Quil rendering function."],"^>","~$clojure-turtle.core/setup","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",12,"^W",["^T",[[]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",301,"^[","^P","^K",301,"^10",0,"^11",true,"^S",["^T",["^U",["^T",[[]]]]],"^M","A helper function for the Quil rendering function."],"~$->Turtle",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",18,"^J",12,"^2D",true,"^2K","~:positional","^I",38,"^K",38,"^S",["^T",["^U",["^T",[["~$x","~$y","~$angle","~$pen","^1O","~$fill","~$commands","~$start-from"]]]]],"^M","Positional factory function for clojure-turtle.core/Turtle."],"^>","~$clojure-turtle.core/->Turtle","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",18,"^W",["^T",[["~$x","~$y","^31","^32","^1O","^33","^34","^35"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^2D",true,"^Z",false,"^2K","^30","^I",38,"^[","^2B","^K",38,"^10",8,"^11",true,"^S",["^T",["^U",["^T",[["~$x","~$y","^31","^32","^1O","^33","^34","^35"]]]]],"^M","Positional factory function for clojure-turtle.core/Turtle."],"~$new-turtle",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",66,"^J",7,"^K",66,"^L",17,"^S",["^T",["^U",["^T",[[]]]]],"^M","Returns an entity that represents a turtle."],"^>","~$clojure-turtle.core/new-turtle","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",17,"^W",["^T",[[]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",66,"^[","^P","^K",66,"^10",0,"^11",true,"^S",["^T",["^U",["^T",[[]]]]],"^M","Returns an entity that represents a turtle."],"~$draw-turtle",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",398,"^J",7,"^K",398,"^L",18,"^S",["^T",["^U",["^T",[["^15"]]]]],"^M","The function passed to Quil for doing rendering."],"^>","~$clojure-turtle.core/draw-turtle","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",18,"^W",["^T",[["^15"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",398,"^[","^P","^K",398,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["^15"]]]]],"^M","The function passed to Quil for doing rendering."],"~$back",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",167,"^J",7,"^K",167,"^L",11,"^S",["^T",["^U",["^T",[["^1Y"],["^15","^1Y"]]]]],"^M","Same as forward, but move the turtle backwards, which is opposite of the direction it is facing.","^16",["^ ","^Z",false,"^10",2,"^W",["^T",[["^1Y"],["^15","^1Y"]]],"^S",["^T",[["^1Y"],["^15","^1Y"]]],"^Y",["^T",[null,null]]]],"^>","~$clojure-turtle.core/back","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",11,"^16",["^ ","^Z",false,"^10",2,"^W",["^T",[["^1Y"],["^15","^1Y"]]],"^S",["^T",[["^1Y"],["^15","^1Y"]]],"^Y",["^T",[null,null]]],"^W",["^T",[["^1Y"],["^15","^1Y"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",167,"^K",167,"^10",2,"^11",true,"^S",["^T",[["^1Y"],["^15","^1Y"]]],"^M","Same as forward, but move the turtle backwards, which is opposite of the direction it is facing."],"~$pr-str-turtle",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",50,"^J",7,"^K",50,"^L",20,"^S",["^T",["^U",["^T",[["^1K"]]]]],"^M","This method determines what gets returned when passing a Turtle record instance to pr-str, which in turn affects what gets printed at the REPL"],"^>","~$clojure-turtle.core/pr-str-turtle","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",20,"^W",["^T",[["^1K"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",50,"^[","^P","^K",50,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["^1K"]]]]],"^M","This method determines what gets returned when passing a Turtle record instance to pr-str, which in turn affects what gets printed at the REPL"],"~$wait",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",236,"^J",7,"^K",236,"^L",11,"^S",["^T",["^U",["^T",[["~$ms"]]]]],"^M","Sleeps for ms miliseconds. Can be used in a repeat to show commands execute in real time"],"^>","~$clojure-turtle.core/wait","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",11,"^W",["^T",[["^3@"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",236,"^K",236,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["^3@"]]]]],"^M","Sleeps for ms miliseconds. Can be used in a repeat to show commands execute in real time"],"~$right",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",121,"^J",7,"^K",121,"^L",12,"^S",["^T",["^U",["^T",[["^1;"],["^15","^1;"]]]]],"^M","Rotate the turtle turt clockwise by ang degrees.","^16",["^ ","^Z",false,"^10",2,"^W",["^T",[["^1;"],["^15","^1;"]]],"^S",["^T",[["^1;"],["^15","^1;"]]],"^Y",["^T",[null,null]]]],"^>","~$clojure-turtle.core/right","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",12,"^16",["^ ","^Z",false,"^10",2,"^W",["^T",[["^1;"],["^15","^1;"]]],"^S",["^T",[["^1;"],["^15","^1;"]]],"^Y",["^T",[null,null]]],"^W",["^T",[["^1;"],["^15","^1;"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",121,"^K",121,"^10",2,"^11",true,"^S",["^T",[["^1;"],["^15","^1;"]]],"^M","Rotate the turtle turt clockwise by ang degrees."],"~$draw-turtle-commands",["^ ","^R",null,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",353,"^J",7,"^K",353,"^L",27,"^S",["^T",["^U",["^T",[["^1K"]]]]],"^M","Takes a seq of turtle commands and converts them into Quil commands to draw\n  onto the canvas"],"^>","~$clojure-turtle.core/draw-turtle-commands","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^L",27,"^W",["^T",[["^1K"]]],"^X",null,"^Y",["^T",[null,null]],"^J",1,"^Z",false,"^I",353,"^[",["^=",[null,"^P"]],"^K",353,"^10",1,"^11",true,"^S",["^T",["^U",["^T",[["^1K"]]]]],"^M","Takes a seq of turtle commands and converts them into Quil commands to draw\n  onto the canvas"],"~$deg->radians",["^ ","^>","~$clojure-turtle.core/deg->radians","^H","resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",145,"^J",1,"^K",145,"^L",18,"^G",["^ ","^H","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/clojure_turtle/core.cljc","^I",145,"^J",6,"^K",145,"^L",18]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","~$q","^B","^B","^B","^:","^:"],"~:cljs.analyzer/constants",["^ ","~:seen",["^=",["~:y","~$x","^1C","~$quil.sketch/add-canvas","~:setxy","~:color","~$quil.core/defsketch","~:start-fill","~$y","~:ns","~:start-from","^V","~:fill","^1O","~$do","~:angle","~:size","~:title","^2Z","~:setheading","~:setup","^33","^35","~:host","~:commands","^31","~:pen","~:translate","~:x","^34","~:draw","^32","~:end-fill","~$example"]],"~:order",["~:x","~:y","^3U","^40","^3N","^3S","^3[","^3R","~$x","~$y","^31","^32","^1O","^33","^34","^35","^3X","^41","^3P","^43","^3M","^3Q","^1C","^3V","^3Z","^3T","^3L","^3O","^44","^3Y","^2Z","^42","^V","^3W"]],"^M",null]