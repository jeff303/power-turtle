["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$join","~$clojure.string"],"~:excludes",["~#set",[]],"~:name","~$parinfer.paren-mode","~:imports",null,"~:requires",["^ ","~$parinfer.reader","^=","~$parinfer.indent-mode","^>","~$parinfer.string","^?","^6","^6"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$whitespace?","^=","~$insert-string","^?","^5","^6","~$in-code?","^=","~$update-line","^>","~$valid-closer?","^=","~$update-insertion-pt","^>","~$remove-delim-trail","^>","~$process-char*","^>","~$update-delim-trail","^>","~$closing-delim?","^=","~$in-str?","^=","~$matching-delim","^=","~$get-lines","^?"],"~:defs",["^ ","~$initial-state",["^ ","~:meta",["^ ","~:file","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/paren_mode.cljc","~:line",20,"~:column",6,"~:end-line",20,"~:end-column",19],"^9","~$parinfer.paren-mode/initial-state","^R","resources/public/js/compiled/out/parinfer/paren_mode.cljc","^V",19,"^T",1,"^S",20,"^U",20,"~:tag","~$cljs.core/IMap","~:doc","An initial state of our running state."],"~$process-text",["^ ","~:protocol-inline",null,"^Q",["^ ","^R","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/paren_mode.cljc","^S",154,"^T",7,"^U",154,"^V",19,"~:arglists",["~#list",["~$quote",["^12",[["~$text"],["^14","~$options"]]]]],"^Z","Update the state by processing the given text.","~:top-fn",["^ ","~:variadic?",false,"~:max-fixed-arity",2,"~:method-params",["^12",[["^14"],["^14","^15"]]],"^11",["^12",[["^14"],["^14","^15"]]],"~:arglists-meta",["^12",[null,null]]]],"^9","~$parinfer.paren-mode/process-text","^R","resources/public/js/compiled/out/parinfer/paren_mode.cljc","^V",19,"^16",["^ ","^17",false,"^18",2,"^19",["^12",[["^14"],["^14","^15"]]],"^11",["^12",[["^14"],["^14","^15"]]],"^1:",["^12",[null,null]]],"^19",["^12",[["^14"],["^14","^15"]]],"~:protocol-impl",null,"^1:",["^12",[null,null]],"^T",1,"^17",false,"^S",154,"^U",154,"^18",2,"~:fn-var",true,"^11",["^12",[["^14"],["^14","^15"]]],"^Z","Update the state by processing the given text."],"~$process-indent",["^ ","^10",null,"^Q",["^ ","^R","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/paren_mode.cljc","^S",81,"^T",7,"^U",81,"^V",21,"^11",["^12",["^13",["^12",[[["^ ","~:keys",["~$stack","~$track-indent?","~$lines","~$line-no","~$ch","~$x-pos","~$cursor-line","~$cursor-x","~$cursor-dx"],"~:as","~$state"]]]]]],"^Z","Update the state by handling a possible indentation trigger."],"^9","~$parinfer.paren-mode/process-indent","^R","resources/public/js/compiled/out/parinfer/paren_mode.cljc","^V",21,"^19",["^12",[["~$p__29567"]]],"^1<",null,"^1:",["^12",[null,null]],"^T",1,"^17",false,"^S",81,"~:ret-tag",["^8",[null,"~$any"]],"^U",81,"^18",1,"^1=",true,"^11",["^12",["^13",["^12",[[["^ ","^1?",["^1@","^1A","^1B","^1C","^1D","^1E","^1F","^1G","^1H"],"^1I","^1J"]]]]]],"^Z","Update the state by handling a possible indentation trigger."],"~$append-delim-trail",["^ ","^10",null,"^Q",["^ ","^R","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/paren_mode.cljc","^S",33,"^T",7,"^U",33,"^V",25,"^11",["^12",["^13",["^12",[[["^ ","^1?",["^1@","^1C","~$insert"],"^1I","^1J"]]]]]]],"^9","~$parinfer.paren-mode/append-delim-trail","^R","resources/public/js/compiled/out/parinfer/paren_mode.cljc","^V",25,"^19",["^12",[["~$p__29551"]]],"^1<",null,"^1:",["^12",[null,null]],"^T",1,"^17",false,"^S",33,"^1M","^1N","^U",33,"^18",1,"^1=",true,"^11",["^12",["^13",["^12",[[["^ ","^1?",["^1@","^1C","^1P"],"^1I","^1J"]]]]]]],"~$handle-cursor-delta",["^ ","^10",null,"^Q",["^ ","^R","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/paren_mode.cljc","^S",73,"^T",7,"^U",73,"^V",26,"^11",["^12",["^13",["^12",[[["^ ","^1?",["~$indent-delta","^1C","^1E","^1F","^1G","^1H"],"^1I","^1J"]]]]]]],"^9","~$parinfer.paren-mode/handle-cursor-delta","^R","resources/public/js/compiled/out/parinfer/paren_mode.cljc","^V",26,"^19",["^12",[["~$p__29563"]]],"^1<",null,"^1:",["^12",[null,null]],"^T",1,"^17",false,"^S",73,"^1M",["^8",[null,"^1N"]],"^U",73,"^18",1,"^1=",true,"^11",["^12",["^13",["^12",[[["^ ","^1?",["^1T","^1C","^1E","^1F","^1G","^1H"],"^1I","^1J"]]]]]]],"~$min-dedent",["^ ","^10",null,"^Q",["^ ","^R","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/paren_mode.cljc","^S",51,"^T",7,"^U",51,"^V",17,"^11",["^12",["^13",["^12",[["~$x",["^ ","^1?",["~$dedent-x"]]]]]]]],"^9","~$parinfer.paren-mode/min-dedent","^R","resources/public/js/compiled/out/parinfer/paren_mode.cljc","^V",17,"^19",["^12",[["~$x","~$p__29557"]]],"^1<",null,"^1:",["^12",[null,null]],"^T",1,"^17",false,"^S",51,"^1M",["^8",[null,"^1N"]],"^U",51,"^18",2,"^1=",true,"^11",["^12",["^13",["^12",[["~$x",["^ ","^1?",["^1X"]]]]]]]],"~$correct-indent",["^ ","^10",null,"^Q",["^ ","^R","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/paren_mode.cljc","^S",57,"^T",7,"^U",57,"^V",21,"^11",["^12",["^13",["^12",[[["^ ","^1?",["^1T","^1E","^1@","^1X","^1C"],"^1I","^1J"]]]]]]],"^9","~$parinfer.paren-mode/correct-indent","^R","resources/public/js/compiled/out/parinfer/paren_mode.cljc","^V",21,"^19",["^12",[["~$p__29560"]]],"^1<",null,"^1:",["^12",[null,null]],"^T",1,"^17",false,"^S",57,"^1M","^1N","^U",57,"^18",1,"^1=",true,"^11",["^12",["^13",["^12",[[["^ ","^1?",["^1T","^1E","^1@","^1X","^1C"],"^1I","^1J"]]]]]]],"~$reinsert-delims",["^ ","^10",null,"^Q",["^ ","^R","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/paren_mode.cljc","^S",115,"^T",7,"^U",115,"^V",22,"^11",["^12",["^13",["^12",[[["^ ","^1?",["~$removed-delims"],"^1I","^1J"]]]]]]],"^9","~$parinfer.paren-mode/reinsert-delims","^R","resources/public/js/compiled/out/parinfer/paren_mode.cljc","^V",22,"^19",["^12",[["~$p__29575"]]],"^1<",null,"^1:",["^12",[null,null]],"^T",1,"^17",false,"^S",115,"^1M","^1N","^U",115,"^18",1,"^1=",true,"^11",["^12",["^13",["^12",[[["^ ","^1?",["^23"],"^1I","^1J"]]]]]]],"~$min-indent",["^ ","^10",null,"^Q",["^ ","^R","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/paren_mode.cljc","^S",44,"^T",7,"^U",44,"^V",17,"^11",["^12",["^13",["^12",[["~$x",["^ ","^1?",["^1@"]]]]]]]],"^9","~$parinfer.paren-mode/min-indent","^R","resources/public/js/compiled/out/parinfer/paren_mode.cljc","^V",17,"^19",["^12",[["~$x","~$p__29554"]]],"^1<",null,"^1:",["^12",[null,null]],"^T",1,"^17",false,"^S",44,"^1M",["^8",[null,"^1N"]],"^U",44,"^18",2,"^1=",true,"^11",["^12",["^13",["^12",[["~$x",["^ ","^1?",["^1@"]]]]]]]],"~$process-line",["^ ","^10",null,"^Q",["^ ","^R","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/paren_mode.cljc","^S",123,"^T",7,"^U",123,"^V",19,"^11",["^12",["^13",["^12",[["~$line"],[["^ ","^1?",["^1@","^1B","^1C","^1F"],"^1I","^1J"],"^2:"]]]]],"^Z","Update the state by processing the given line of text.","^16",["^ ","^17",false,"^18",2,"^19",["^12",[["^2:"],[["^ ","^1?",["^1@","^1B","^1C","^1F"],"^1I","^1J"],"^2:"]]],"^11",["^12",[["^2:"],[["^ ","^1?",["^1@","^1B","^1C","^1F"],"^1I","^1J"],"^2:"]]],"^1:",["^12",[null,null]]]],"^9","~$parinfer.paren-mode/process-line","^R","resources/public/js/compiled/out/parinfer/paren_mode.cljc","^V",19,"^16",["^ ","^17",false,"^18",2,"^19",["^12",[["^2:"],[["^ ","^1?",["^1@","^1B","^1C","^1F"],"^1I","^1J"],"^2:"]]],"^11",["^12",[["^2:"],[["^ ","^1?",["^1@","^1B","^1C","^1F"],"^1I","^1J"],"^2:"]]],"^1:",["^12",[null,null]]],"^19",["^12",[["^2:"],[["^ ","^1?",["^1@","^1B","^1C","^1F"],"^1I","^1J"],"^2:"]]],"^1<",null,"^1:",["^12",[null,null]],"^T",1,"^17",false,"^S",123,"^U",123,"^18",2,"^1=",true,"^11",["^12",[["^2:"],[["^ ","^1?",["^1@","^1B","^1C","^1F"],"^1I","^1J"],"^2:"]]],"^Z","Update the state by processing the given line of text."],"~$finalize-state",["^ ","^10",null,"^Q",["^ ","^R","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/paren_mode.cljc","^S",149,"^T",7,"^U",149,"^V",21,"^11",["^12",["^13",["^12",[[["^ ","^1?",["^1@"],"^1I","^1J"]]]]]]],"^9","~$parinfer.paren-mode/finalize-state","^R","resources/public/js/compiled/out/parinfer/paren_mode.cljc","^V",21,"^19",["^12",[["~$p__29585"]]],"^1<",null,"^1:",["^12",[null,null]],"^T",1,"^17",false,"^S",149,"^1M","^1N","^U",149,"^18",1,"^1=",true,"^11",["^12",["^13",["^12",[[["^ ","^1?",["^1@"],"^1I","^1J"]]]]]]],"~$process-char",["^ ","^10",null,"^Q",["^ ","^R","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/paren_mode.cljc","^S",106,"^T",7,"^U",106,"^V",19,"^11",["^12",["^13",["^12",[[["^ ","^1?",["^1B","^1C"],"^1I","^1J"],"^1D"]]]]],"^Z","Update the state by processing the given character and its position."],"^9","~$parinfer.paren-mode/process-char","^R","resources/public/js/compiled/out/parinfer/paren_mode.cljc","^V",19,"^19",["^12",[["~$p__29571","^1D"]]],"^1<",null,"^1:",["^12",[null,null]],"^T",1,"^17",false,"^S",106,"^1M",["^8",[null,"^1N"]],"^U",106,"^18",2,"^1=",true,"^11",["^12",["^13",["^12",[[["^ ","^1?",["^1B","^1C"],"^1I","^1J"],"^1D"]]]]],"^Z","Update the state by processing the given character and its position."],"~$format-text",["^ ","^10",null,"^Q",["^ ","^R","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/paren_mode.cljc","^S",164,"^T",7,"^U",164,"^V",18,"^11",["^12",["^13",["^12",[["^14"],["^14","^15"]]]]],"^Z","Fully process the given text using Paren Mode.\n\n  'text' is the full text.\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change` (once it is implemented)\n  ","^16",["^ ","^17",false,"^18",2,"^19",["^12",[["^14"],["^14","^15"]]],"^11",["^12",[["^14"],["^14","^15"]]],"^1:",["^12",[null,null]]]],"^9","~$parinfer.paren-mode/format-text","^R","resources/public/js/compiled/out/parinfer/paren_mode.cljc","^V",18,"^16",["^ ","^17",false,"^18",2,"^19",["^12",[["^14"],["^14","^15"]]],"^11",["^12",[["^14"],["^14","^15"]]],"^1:",["^12",[null,null]]],"^19",["^12",[["^14"],["^14","^15"]]],"^1<",null,"^1:",["^12",[null,null]],"^T",1,"^17",false,"^S",164,"^U",164,"^18",2,"^1=",true,"^11",["^12",[["^14"],["^14","^15"]]],"^Z","Fully process the given text using Paren Mode.\n\n  'text' is the full text.\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change` (once it is implemented)\n  "]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:cursor-line","~:backup","~:insert","~:valid?","~:process?","~:x-pos","~:cursor-x","~:dedent-x","~:start","~:lines","~:state","~:ch","~:cursor-dx","~:track-indent?","~:line-no","~:stack","~:delim-trail","~:indent-delta","~:removed-delims","~:end","~:line-dy","~:text","~:cursor-in-comment?"]],"~:order",["^2I","^2J","^2O","^2Q","^2U","^2V","^2W","^2X","^2Y","^30","^2M","^2P","^2[","^2S","^2H","^2N","^2T","^2L","^2Z","^32","^2K","^31","^2R"]],"^Z","Corrects indentation based on parens.\n  See http://shaunlebron.github.io/parinfer/#paren-mode"]