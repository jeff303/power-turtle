["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$join","~$clojure.string"],"~:excludes",["~#set",[]],"~:name","~$parinfer.indent-mode","~:imports",null,"~:requires",["^ ","^6","^6","~$parinfer.string","^=","~$parinfer.reader","^>"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$whitespace?","^>","~$insert-string","^=","^5","^6","~$in-code?","^>","~$valid-closer?","^>","~$in-comment?","^>","~$remove-str-range","^=","~$closing-delim?","^>","~$in-str?","^>","~$matching-delim","^>","~$push-char","^>","~$get-lines","^=","~$escaping?","^>"],"~:defs",["^ ","~$initial-state",["^ ","~:meta",["^ ","~:file","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","~:line",19,"~:column",6,"~:end-line",19,"~:end-column",19],"^9","~$parinfer.indent-mode/initial-state","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",19,"^R",1,"^Q",19,"^S",19,"~:tag","~$cljs.core/IMap","~:doc","An initial state of our running state."],"~$process-text-change",["^ ","~:protocol-inline",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",404,"^R",7,"^S",404,"^T",26,"~:arglists",["~#list",["~$quote",["^10",[["~$prev-state","~$change"],["^12",["^ ","~:keys",["~$line-no","~$new-line"],"~:as","^13"],"~$options"]]]]],"^X","Processes the given change for the given state.  Returns new state.\n  See `format-text-change` for usage.","~:top-fn",["^ ","~:variadic?",false,"~:max-fixed-arity",3,"~:method-params",["^10",[["^12","^13"],["^12",["^ ","^14",["^15","^16"],"^17","^13"],"^18"]]],"^[",["^10",[["^12","^13"],["^12",["^ ","^14",["^15","^16"],"^17","^13"],"^18"]]],"~:arglists-meta",["^10",[null,null]]]],"^9","~$parinfer.indent-mode/process-text-change","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",26,"^19",["^ ","^1:",false,"^1;",3,"^1<",["^10",[["^12","^13"],["^12",["^ ","^14",["^15","^16"],"^17","^13"],"^18"]]],"^[",["^10",[["^12","^13"],["^12",["^ ","^14",["^15","^16"],"^17","^13"],"^18"]]],"^1=",["^10",[null,null]]],"^1<",["^10",[["^12","^13"],["^12",["^ ","^14",["^15","^16"],"^17","^13"],"^18"]]],"~:protocol-impl",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",404,"^S",404,"^1;",3,"~:fn-var",true,"^[",["^10",[["^12","^13"],["^12",["^ ","^14",["^15","^16"],"^17","^13"],"^18"]]],"^X","Processes the given change for the given state.  Returns new state.\n  See `format-text-change` for usage."],"~$block-delim-trail",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",122,"^R",7,"^S",122,"^T",24,"^[",["^10",["^11",["^10",[[["^ ","^14",["~$delim-trail","^15","~$cursor-line","~$cursor-x","~$cursor-in-comment?"],"^17","~$state"]]]]]],"^X","The presence of the cursor can block the removal of some part of the delim trail."],"^9","~$parinfer.indent-mode/block-delim-trail","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",24,"^1<",["^10",[["~$p__29468"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",122,"~:ret-tag","~$any","^S",122,"^1;",1,"^1@",true,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1B","^15","^1C","^1D","^1E"],"^17","^1F"]]]]]],"^X","The presence of the cursor can block the removal of some part of the delim trail."],"~$process-text",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",327,"^R",7,"^S",327,"^T",19,"^[",["^10",["^11",["^10",[["~$text"],["^1L","^18"]]]]],"^X","Fully processes the given text.  Returns new state.\n  See `format-text` for usage.","^19",["^ ","^1:",false,"^1;",2,"^1<",["^10",[["^1L"],["^1L","^18"]]],"^[",["^10",[["^1L"],["^1L","^18"]]],"^1=",["^10",[null,null]]]],"^9","~$parinfer.indent-mode/process-text","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",19,"^19",["^ ","^1:",false,"^1;",2,"^1<",["^10",[["^1L"],["^1L","^18"]]],"^[",["^10",[["^1L"],["^1L","^18"]]],"^1=",["^10",[null,null]]],"^1<",["^10",[["^1L"],["^1L","^18"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",327,"^S",327,"^1;",2,"^1@",true,"^[",["^10",[["^1L"],["^1L","^18"]]],"^X","Fully processes the given text.  Returns new state.\n  See `format-text` for usage."],"~$format-text-change",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",451,"^R",7,"^S",451,"^T",25,"^[",["^10",["^11",["^10",[["^1L","^12","^13"],["^1L","^12","^13","^18"]]]]],"^X","Process changed lines in a previously processed text using Indent Mode.\n\n  'text' is the full text (including the change).\n\n  'prev-state' is the state after processing 'text' before the 'change' occurred.\n    - found in the :state key of the result returned by `format-text` or this function.\n\n  'change' is a map:\n\n    KEY        |  DESCRIPTION             |  TYPE\n    -----------+--------------------------+------------------------------------\n    :line-no   |  line range to replace   |  a num or min,max line range\n    :new-line  |  new line(s) to insert   |  a string or seq if multiple lines\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  ","^19",["^ ","^1:",false,"^1;",4,"^1<",["^10",[["^1L","^12","^13"],["^1L","^12","^13","^18"]]],"^[",["^10",[["^1L","^12","^13"],["^1L","^12","^13","^18"]]],"^1=",["^10",[null,null]]]],"^9","~$parinfer.indent-mode/format-text-change","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",25,"^19",["^ ","^1:",false,"^1;",4,"^1<",["^10",[["^1L","^12","^13"],["^1L","^12","^13","^18"]]],"^[",["^10",[["^1L","^12","^13"],["^1L","^12","^13","^18"]]],"^1=",["^10",[null,null]]],"^1<",["^10",[["^1L","^12","^13"],["^1L","^12","^13","^18"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",451,"^S",451,"^1;",4,"^1@",true,"^[",["^10",[["^1L","^12","^13"],["^1L","^12","^13","^18"]]],"^X","Process changed lines in a previously processed text using Indent Mode.\n\n  'text' is the full text (including the change).\n\n  'prev-state' is the state after processing 'text' before the 'change' occurred.\n    - found in the :state key of the result returned by `format-text` or this function.\n\n  'change' is a map:\n\n    KEY        |  DESCRIPTION             |  TYPE\n    -----------+--------------------------+------------------------------------\n    :line-no   |  line range to replace   |  a num or min,max line range\n    :new-line  |  new line(s) to insert   |  a string or seq if multiple lines\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  "],"~$process-indent",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",228,"^R",7,"^S",228,"^T",21,"^[",["^10",["^11",["^10",[[["^ ","^14",["~$stack","~$track-indent?","~$lines","^15","~$x-pos","~$ch"],"^17","^1F"]]]]]],"^X","Update the state by handling a possible indentation trigger.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then\n                   ;;       we start backtracking to insert closing delimiters on a previous line.\n\n\n  (defn foo [a b]\n     )             ;; <---  If a line starts with a closing delimiter, it is not\n                   ;;       considered an indentation trigger.  In fact, we skip\n                   ;;       the character completely, removing it from the line.\n  "],"^9","~$parinfer.indent-mode/process-indent","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",21,"^1<",["^10",[["~$p__29493"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",228,"^1I","^1J","^S",228,"^1;",1,"^1@",true,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1Q","^1R","^1S","^15","^1T","^1U"],"^17","^1F"]]]]]],"^X","Update the state by handling a possible indentation trigger.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then\n                   ;;       we start backtracking to insert closing delimiters on a previous line.\n\n\n  (defn foo [a b]\n     )             ;; <---  If a line starts with a closing delimiter, it is not\n                   ;;       considered an indentation trigger.  In fact, we skip\n                   ;;       the character completely, removing it from the line.\n  "],"~$update-line",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",259,"^R",7,"^S",259,"^T",18,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1U","^15"],"^17","^1F"]]]]]],"^X","Update the state by adding processed character to the line."],"^9","~$parinfer.indent-mode/update-line","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",18,"^1<",["^10",[["~$p__29496"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",259,"^1I","^1J","^S",259,"^1;",1,"^1@",true,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1U","^15"],"^17","^1F"]]]]]],"^X","Update the state by adding processed character to the line."],"~$initial-cached-state",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",392,"^R",7,"^S",392,"^T",27,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1S","~$postline-states","~$postindent-states"],"^17","^12"],"^18","~$i"]]]]],"^X","build an initial state based on our starting line and previous cache."],"^9","~$parinfer.indent-mode/initial-cached-state","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",27,"^1<",["^10",[["~$p__29531","^18","~$i"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",392,"^1I",["^8",[null,"^1J"]],"^S",392,"^1;",3,"^1@",true,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1S","^20","^21"],"^17","^12"],"^18","~$i"]]]]],"^X","build an initial state based on our starting line and previous cache."],"~$close-delims",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",33,"^R",7,"^S",33,"^T",19,"^[",["^10",["^11",["^10",[["^1F"],["^1F","~$indent-x"]]]]],"^X","Update the state by inferring closing delimiters.\n  Do this by using the given indentation level.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then...\n\n  (defn foo [a b]  ;; <---  ... we insert a `]` after `b` since `[` is after `r` on the x-axis.\n     ret           ;; <---  A `)` is inserted after `ret` if no further indented lines found.\n  ","^19",["^ ","^1:",false,"^1;",2,"^1<",["^10",[["^1F"],["^1F","^25"]]],"^[",["^10",[["^1F"],["^1F","^25"]]],"^1=",["^10",[null,null]]]],"^9","~$parinfer.indent-mode/close-delims","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",19,"^19",["^ ","^1:",false,"^1;",2,"^1<",["^10",[["^1F"],["^1F","^25"]]],"^[",["^10",[["^1F"],["^1F","^25"]]],"^1=",["^10",[null,null]]],"^1<",["^10",[["^1F"],["^1F","^25"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",33,"^S",33,"^1;",2,"^1@",true,"^[",["^10",[["^1F"],["^1F","^25"]]],"^X","Update the state by inferring closing delimiters.\n  Do this by using the given indentation level.\n\n  Example:\n\n  (defn foo [a b\n     ret           ;; <---  When we process `r`, we detect indentation, then...\n\n  (defn foo [a b]  ;; <---  ... we insert a `]` after `b` since `[` is after `r` on the x-axis.\n     ret           ;; <---  A `)` is inserted after `ret` if no further indented lines found.\n  "],"~$get-cached-state",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",218,"^R",7,"^S",218,"^T",23,"^[",["^10",["^11",["^10",[["^1F"]]]]]],"^9","~$parinfer.indent-mode/get-cached-state","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",23,"^1<",["^10",[["^1F"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",218,"^1I","~$clj","^S",218,"^1;",1,"^1@",true,"^[",["^10",["^11",["^10",[["^1F"]]]]]],"~$update-insertion-pt",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",178,"^R",7,"^S",178,"^T",26,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1R","^1C","^1S","^15","^1Q","^1T","^1U"],"^17","^1F"]]]]]],"^X","Update the state's trailing delimiter insertion point as we scan the line.\n\n  Example:\n\n  (defn foo [a b] ret)\n  ^^^^^ ^^^ ^^ ^  ^^^\n                    |\n                    +-- final insertion point candidate\n\n  Special rules allow the user to freely position the trailing\n  delimiters while editing a line.\n\n  "],"^9","~$parinfer.indent-mode/update-insertion-pt","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",26,"^1<",["^10",[["~$p__29489"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",178,"^1I",["^8",[null,"^1J"]],"^S",178,"^1;",1,"^1@",true,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1R","^1C","^1S","^15","^1Q","^1T","^1U"],"^17","^1F"]]]]]],"^X","Update the state's trailing delimiter insertion point as we scan the line.\n\n  Example:\n\n  (defn foo [a b] ret)\n  ^^^^^ ^^^ ^^ ^  ^^^\n                    |\n                    +-- final insertion point candidate\n\n  Special rules allow the user to freely position the trailing\n  delimiters while editing a line.\n\n  "],"~$remove-delim-trail",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",136,"^R",7,"^S",136,"^T",25,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1B","~$insert","^15","^1S","~$backup","^1Q"],"^17","^1F"]]]]]],"^X","Update the state by removing our marked delim trail.\n  We remove the delims from the appropriate line of text,\n  while also restoring their matching delims onto the stack.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n  ^            ^^   ^^^^\n  |            |     |\n  |____________|     +-- Remove these from the text.\n         |\n         +-- Restore these onto the delim stack.\n             (fyi, we originally popped them off to validate\n              the closing delims. now we need them back to\n              infer closing delims for indented lines.)\n  "],"^9","~$parinfer.indent-mode/remove-delim-trail","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",25,"^1<",["^10",[["~$p__29478"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",136,"^1I",["^8",[null,"^1J"]],"^S",136,"^1;",1,"^1@",true,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1B","^2>","^15","^1S","^2?","^1Q"],"^17","^1F"]]]]]],"^X","Update the state by removing our marked delim trail.\n  We remove the delims from the appropriate line of text,\n  while also restoring their matching delims onto the stack.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n  ^            ^^   ^^^^\n  |            |     |\n  |____________|     +-- Remove these from the text.\n         |\n         +-- Restore these onto the delim stack.\n             (fyi, we originally popped them off to validate\n              the closing delims. now we need them back to\n              infer closing delims for indented lines.)\n  "],"~$fill-rest-with-cache",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",357,"^R",7,"^S",357,"^T",27,"^[",["^10",["^11",["^10",[["^12","^1F","~$last-i"]]]]],"^X","fill the rest of the lines with info from cache."],"^9","~$parinfer.indent-mode/fill-rest-with-cache","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",27,"^1<",["^10",[["^12","^1F","^2C"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",357,"^1I",["^8",[null,"^1J"]],"^S",357,"^1;",3,"^1@",true,"^[",["^10",["^11",["^10",[["^12","^1F","^2C"]]]]],"^X","fill the rest of the lines with info from cache."],"~$process-char*",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",273,"^R",7,"^S",273,"^T",20,"^[",["^10",["^11",["^10",[["^1F"]]]]]],"^9","~$parinfer.indent-mode/process-char*","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",20,"^1<",["^10",[["^1F"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",273,"^1I","^1J","^S",273,"^1;",1,"^1@",true,"^[",["^10",["^11",["^10",[["^1F"]]]]]],"~$update-delim-trail",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",66,"^R",7,"^S",66,"^T",25,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1Q","^1B","^2?","^1T","^1U","^1C","^15","^1D","^1E"],"^17","^1F"]]]]]],"^X","Update the state's delim trail as we scan across a line.\n  We eventually remove the delim trail since the indented\n  content below can cause the delims to move.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n                    ^^^^\n                     |\n                     +-- trailing delims that we will remove\n                          (notice whitespace will also be removed)\n  "],"^9","~$parinfer.indent-mode/update-delim-trail","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",25,"^1<",["^10",[["~$p__29464"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",66,"^1I","^1J","^S",66,"^1;",1,"^1@",true,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1Q","^1B","^2?","^1T","^1U","^1C","^15","^1D","^1E"],"^17","^1F"]]]]]],"^X","Update the state's delim trail as we scan across a line.\n  We eventually remove the delim trail since the indented\n  content below can cause the delims to move.\n\n  Example:\n\n  (foo (+ 2 3) [(bar)] )    ;; a potential comment\n                    ^^^^\n                     |\n                     +-- trailing delims that we will remove\n                          (notice whitespace will also be removed)\n  "],"~$process-unchanged-lines",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",383,"^R",7,"^S",383,"^T",30,"^[",["^10",["^11",["^10",[["^12","^1F","~$start-i"]]]]],"^X","process the lines after those that have changed."],"^9","~$parinfer.indent-mode/process-unchanged-lines","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",30,"^1<",["^10",[["^12","^1F","^2K"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",383,"^1I","^1J","^S",383,"^1;",3,"^1@",true,"^[",["^10",["^11",["^10",[["^12","^1F","^2K"]]]]],"^X","process the lines after those that have changed."],"~$commit-cached-state",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",222,"^R",7,"^S",222,"^T",26,"^[",["^10",["^11",["^10",[["^1F","~$key-"]]]]],"^X","Cache a subset of the state after some event.\n  This is used by process-text-change."],"^9","~$parinfer.indent-mode/commit-cached-state","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",26,"^1<",["^10",[["^1F","^2N"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",222,"^1I","^1J","^S",222,"^1;",2,"^1@",true,"^[",["^10",["^11",["^10",[["^1F","^2N"]]]]],"^X","Cache a subset of the state after some event.\n  This is used by process-text-change."],"~$save-preinsert-line",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",264,"^R",7,"^S",264,"^T",26,"^[",["^10",["^11",["^10",[[["^ ","^14",["^15","^2>","^1S"],"^17","^1F"]]]]]],"^X","Save the text of a line before trailing delims were inserted.\n  This allows to restore them when skipping to changed lines in\n  process-text-change."],"^9","~$parinfer.indent-mode/save-preinsert-line","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",26,"^1<",["^10",[["~$p__29499"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",264,"^1I",["^8",[null,"^1J"]],"^S",264,"^1;",1,"^1@",true,"^[",["^10",["^11",["^10",[[["^ ","^14",["^15","^2>","^1S"],"^17","^1F"]]]]]],"^X","Save the text of a line before trailing delims were inserted.\n  This allows to restore them when skipping to changed lines in\n  process-text-change."],"~$process-line",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",291,"^R",7,"^S",291,"^T",19,"^[",["^10",["^11",["^10",[["~$line"],[["^ ","^14",["^1Q","^1S","^15","^1C"],"^17","^1F"],"^2T"]]]]],"^X","Update the state by processing the given line of text.","^19",["^ ","^1:",false,"^1;",2,"^1<",["^10",[["^2T"],[["^ ","^14",["^1Q","^1S","^15","^1C"],"^17","^1F"],"^2T"]]],"^[",["^10",[["^2T"],[["^ ","^14",["^1Q","^1S","^15","^1C"],"^17","^1F"],"^2T"]]],"^1=",["^10",[null,null]]]],"^9","~$parinfer.indent-mode/process-line","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",19,"^19",["^ ","^1:",false,"^1;",2,"^1<",["^10",[["^2T"],[["^ ","^14",["^1Q","^1S","^15","^1C"],"^17","^1F"],"^2T"]]],"^[",["^10",[["^2T"],[["^ ","^14",["^1Q","^1S","^15","^1C"],"^17","^1F"],"^2T"]]],"^1=",["^10",[null,null]]],"^1<",["^10",[["^2T"],[["^ ","^14",["^1Q","^1S","^15","^1C"],"^17","^1F"],"^2T"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",291,"^S",291,"^1;",2,"^1@",true,"^[",["^10",[["^2T"],[["^ ","^14",["^1Q","^1S","^15","^1C"],"^17","^1F"],"^2T"]]],"^X","Update the state by processing the given line of text."],"~$finalize-state",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",320,"^R",7,"^S",320,"^T",21,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1Q"],"^17","^1F"]]]]]]],"^9","~$parinfer.indent-mode/finalize-state","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",21,"^1<",["^10",[["~$p__29515"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",320,"^1I","^1J","^S",320,"^1;",1,"^1@",true,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1Q"],"^17","^1F"]]]]]]],"~$restore-insert-line",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",348,"^R",7,"^S",348,"^T",26,"^[",["^10",["^11",["^10",[[["^ ","^14",["^2>","^15"],"^17","^1F"]]]]]],"^X","restore the text of a line before trailing delimiters were inserted"],"^9","~$parinfer.indent-mode/restore-insert-line","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",26,"^1<",["^10",[["~$p__29522"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",348,"^1I",["^8",[null,"^1J"]],"^S",348,"^1;",1,"^1@",true,"^[",["^10",["^11",["^10",[[["^ ","^14",["^2>","^15"],"^17","^1F"]]]]]],"^X","restore the text of a line before trailing delimiters were inserted"],"~$process-char",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",282,"^R",7,"^S",282,"^T",19,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1S","^15"],"^17","^1F"],"^1U"]]]]],"^X","Update the state by processing the given character and its position."],"^9","~$parinfer.indent-mode/process-char","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",19,"^1<",["^10",[["~$p__29503","^1U"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",282,"^1I","^1J","^S",282,"^1;",2,"^1@",true,"^[",["^10",["^11",["^10",[[["^ ","^14",["^1S","^15"],"^17","^1F"],"^1U"]]]]],"^X","Update the state by processing the given character and its position."],"~$safe-subvec",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",342,"^R",7,"^S",342,"^T",18,"^[",["^10",["^11",["^10",[["~$v","~$i"]]]]]],"^9","~$parinfer.indent-mode/safe-subvec","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",18,"^1<",["^10",[["~$v","~$i"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",342,"^1I",["^8",["~$cljs.core/IVector","^1J"]],"^S",342,"^1;",2,"^1@",true,"^[",["^10",["^11",["^10",[["~$v","~$i"]]]]]],"~$process-unchanged-line*",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",371,"^R",7,"^S",371,"^T",30,"^[",["^10",["^11",["^10",[["^12","^1F",["~$old-i","^2T","~$cache"]]]]]],"^X","process a line that comes after those that have changed.\n  'reduced' will halt further processing."],"^9","~$parinfer.indent-mode/process-unchanged-line*","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",30,"^1<",["^10",[["^12","^1F","~$p__29527"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",371,"^1I",["^8",["~$cljs.core/Reduced","^1J"]],"^S",371,"^1;",3,"^1@",true,"^[",["^10",["^11",["^10",[["^12","^1F",["^37","^2T","^38"]]]]]],"^X","process a line that comes after those that have changed.\n  'reduced' will halt further processing."],"~$format-text",["^ ","^Z",null,"^O",["^ ","^P","/Users/timothy/git/power-turtle/resources/public/js/compiled/out/parinfer/indent_mode.cljc","^Q",427,"^R",7,"^S",427,"^T",18,"^[",["^10",["^11",["^10",[["^1L"],["^1L","^18"]]]]],"^X","Fully process the given text using Indent Mode.\n\n  'text' is the full text.\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  ","^19",["^ ","^1:",false,"^1;",2,"^1<",["^10",[["^1L"],["^1L","^18"]]],"^[",["^10",[["^1L"],["^1L","^18"]]],"^1=",["^10",[null,null]]]],"^9","~$parinfer.indent-mode/format-text","^P","resources/public/js/compiled/out/parinfer/indent_mode.cljc","^T",18,"^19",["^ ","^1:",false,"^1;",2,"^1<",["^10",[["^1L"],["^1L","^18"]]],"^[",["^10",[["^1L"],["^1L","^18"]]],"^1=",["^10",[null,null]]],"^1<",["^10",[["^1L"],["^1L","^18"]]],"^1?",null,"^1=",["^10",[null,null]],"^R",1,"^1:",false,"^Q",427,"^S",427,"^1;",2,"^1@",true,"^[",["^10",[["^1L"],["^1L","^18"]]],"^X","Fully process the given text using Indent Mode.\n\n  'text' is the full text.\n\n  'options' is an optional map with supported keys:\n    :cursor-x     - x position of the cursor (zero-based)\n    :cursor-line  - line number of the cursor (zero-based)\n\n  Returns a map:\n    :text     - full text output\n    :valid?   - indicates if the input was valid\n    :state    - cached state to be passed to `format-text-change`\n  "]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^8",["~:postindent-states","~:cursor-line","~:backup","~:insert","~:valid?","~:else","~:process?","~:x-pos","~:cursor-x","~:start","~:lines","~:state","~:postline-states","~:ch","~:track-indent?","^Q","~:line-no","~:stack","~:delim-trail","~:new-line","~:removed-delims","~:end","~:processed-indent?","~:line-dy","~:text","~:cursor-in-comment?"]],"~:order",["^3B","^3D","^3E","^3L","^3N","^3P","^3Q","^3R","^3S","^3X","^3I","^3K","^3V","^3O","^3Z","^3C","^3J","^3G","^3U","^3H","^3W","^Q","^3F","^3T","^3Y","^3M"]],"^X","Corrects parens based on indentation.\n  See http://shaunlebron.github.io/parinfer/#indent-mode"]